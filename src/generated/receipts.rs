// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Receipt {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub block_height: i64,
    #[prost(bytes = "vec", tag = "3")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int32, tag = "4")]
    pub tx_index: i32,
    #[prost(int32, tag = "5")]
    pub receipt_index: i32,
    #[prost(enumeration = "ReceiptType", tag = "6")]
    pub receipt_type: i32,
    /// Metadata
    #[prost(message, optional, tag = "20")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "21")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "22")]
    pub pointer: ::core::option::Option<super::pointers::ReceiptPointer>,
    /// Specific receipt type
    #[prost(
        oneof = "receipt::Receipt",
        tags = "7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19"
    )]
    pub receipt: ::core::option::Option<receipt::Receipt>,
}
/// Nested message and enum types in `Receipt`.
pub mod receipt {
    /// Specific receipt type
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Receipt {
        #[prost(message, tag = "7")]
        Call(super::ReceiptCall),
        #[prost(message, tag = "8")]
        Return(super::ReceiptReturn),
        #[prost(message, tag = "9")]
        ReturnData(super::ReceiptReturnData),
        #[prost(message, tag = "10")]
        Panic(super::ReceiptPanic),
        #[prost(message, tag = "11")]
        Revert(super::ReceiptRevert),
        #[prost(message, tag = "12")]
        Log(super::ReceiptLog),
        #[prost(message, tag = "13")]
        LogData(super::ReceiptLogData),
        #[prost(message, tag = "14")]
        Transfer(super::ReceiptTransfer),
        #[prost(message, tag = "15")]
        TransferOut(super::ReceiptTransferOut),
        #[prost(message, tag = "16")]
        ScriptResult(super::ReceiptScriptResult),
        #[prost(message, tag = "17")]
        MessageOut(super::ReceiptMessageOut),
        #[prost(message, tag = "18")]
        Mint(super::ReceiptMint),
        #[prost(message, tag = "19")]
        Burn(super::ReceiptBurn),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptCall {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub to_contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "5")]
    pub amount: i64,
    #[prost(bytes = "vec", tag = "6")]
    pub asset_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "7")]
    pub gas: i64,
    #[prost(int64, tag = "8")]
    pub param1: i64,
    #[prost(int64, tag = "9")]
    pub param2: i64,
    #[prost(int64, tag = "10")]
    pub pc: i64,
    #[prost(int64, tag = "11")]
    pub is: i64,
    #[prost(message, optional, tag = "12")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "13")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptReturn {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "4")]
    pub val: i64,
    #[prost(int64, tag = "5")]
    pub pc: i64,
    #[prost(int64, tag = "6")]
    pub is: i64,
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptReturnData {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "4")]
    pub ptr: i64,
    #[prost(int64, tag = "5")]
    pub len: i64,
    #[prost(bytes = "vec", tag = "6")]
    pub digest: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "7")]
    pub pc: i64,
    #[prost(int64, tag = "8")]
    pub is: i64,
    #[prost(bytes = "vec", tag = "9")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "10")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "11")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptPanic {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "4")]
    pub reason: i64,
    #[prost(int64, tag = "5")]
    pub pc: i64,
    #[prost(int64, tag = "6")]
    pub is: i64,
    #[prost(bytes = "vec", tag = "7")]
    pub panic_contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptRevert {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "4")]
    pub val: i64,
    #[prost(int64, tag = "5")]
    pub pc: i64,
    #[prost(int64, tag = "6")]
    pub is: i64,
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptLog {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "4")]
    pub ra: i64,
    #[prost(int64, tag = "5")]
    pub rb: i64,
    #[prost(int64, tag = "6")]
    pub rc: i64,
    #[prost(int64, tag = "7")]
    pub rd: i64,
    #[prost(int64, tag = "8")]
    pub pc: i64,
    #[prost(int64, tag = "9")]
    pub is: i64,
    #[prost(message, optional, tag = "10")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "11")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptLogData {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "4")]
    pub ra: i64,
    #[prost(int64, tag = "5")]
    pub rb: i64,
    #[prost(int64, tag = "6")]
    pub ptr: i64,
    #[prost(int64, tag = "7")]
    pub len: i64,
    #[prost(bytes = "vec", tag = "8")]
    pub digest: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "9")]
    pub pc: i64,
    #[prost(int64, tag = "10")]
    pub is: i64,
    #[prost(bytes = "vec", tag = "11")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "12")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "13")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptTransfer {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub to_contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "5")]
    pub amount: i64,
    #[prost(bytes = "vec", tag = "6")]
    pub asset_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "7")]
    pub pc: i64,
    #[prost(int64, tag = "8")]
    pub is: i64,
    #[prost(message, optional, tag = "9")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptTransferOut {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub to_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "5")]
    pub amount: i64,
    #[prost(bytes = "vec", tag = "6")]
    pub asset_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "7")]
    pub pc: i64,
    #[prost(int64, tag = "8")]
    pub is: i64,
    #[prost(message, optional, tag = "9")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptScriptResult {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "ScriptResultType", tag = "3")]
    pub result: i32,
    #[prost(int64, tag = "4")]
    pub gas_used: i64,
    #[prost(message, optional, tag = "5")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptMessageOut {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub sender_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub recipient_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "5")]
    pub amount: i64,
    #[prost(bytes = "vec", tag = "6")]
    pub nonce: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "7")]
    pub len: i64,
    #[prost(bytes = "vec", tag = "8")]
    pub digest: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "9")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "10")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "11")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptMint {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub sub_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "5")]
    pub asset_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "6")]
    pub val: i64,
    #[prost(int64, tag = "7")]
    pub pc: i64,
    #[prost(int64, tag = "8")]
    pub is: i64,
    #[prost(message, optional, tag = "9")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiptBurn {
    #[prost(string, tag = "1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tx_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub sub_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "5")]
    pub asset_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "6")]
    pub val: i64,
    #[prost(int64, tag = "7")]
    pub pc: i64,
    #[prost(int64, tag = "8")]
    pub is: i64,
    #[prost(message, optional, tag = "9")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub published_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReceiptType {
    Call = 0,
    Return = 1,
    ReturnData = 2,
    Panic = 3,
    Revert = 4,
    Log = 5,
    LogData = 6,
    Transfer = 7,
    TransferOut = 8,
    ScriptResult = 9,
    MessageOut = 10,
    Mint = 11,
    Burn = 12,
}
impl ReceiptType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Call => "CALL",
            Self::Return => "RETURN",
            Self::ReturnData => "RETURN_DATA",
            Self::Panic => "PANIC",
            Self::Revert => "REVERT",
            Self::Log => "LOG",
            Self::LogData => "LOG_DATA",
            Self::Transfer => "TRANSFER",
            Self::TransferOut => "TRANSFER_OUT",
            Self::ScriptResult => "SCRIPT_RESULT",
            Self::MessageOut => "MESSAGE_OUT",
            Self::Mint => "MINT",
            Self::Burn => "BURN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CALL" => Some(Self::Call),
            "RETURN" => Some(Self::Return),
            "RETURN_DATA" => Some(Self::ReturnData),
            "PANIC" => Some(Self::Panic),
            "REVERT" => Some(Self::Revert),
            "LOG" => Some(Self::Log),
            "LOG_DATA" => Some(Self::LogData),
            "TRANSFER" => Some(Self::Transfer),
            "TRANSFER_OUT" => Some(Self::TransferOut),
            "SCRIPT_RESULT" => Some(Self::ScriptResult),
            "MESSAGE_OUT" => Some(Self::MessageOut),
            "MINT" => Some(Self::Mint),
            "BURN" => Some(Self::Burn),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ScriptResultType {
    Success = 0,
    Failure = 1,
}
impl ScriptResultType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Success => "SUCCESS",
            Self::Failure => "FAILURE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUCCESS" => Some(Self::Success),
            "FAILURE" => Some(Self::Failure),
            _ => None,
        }
    }
}
