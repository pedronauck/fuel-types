// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Predicate {
    #[prost(enumeration = "AccountType", tag = "1")]
    #[serde(rename = "type")]
    pub r#type: i32,
    #[prost(message, optional, tag = "2")]
    pub pointer: ::core::option::Option<super::pointers::PredicatePointer>,
    #[prost(message, optional, tag = "3")]
    #[serde(flatten)]
    pub data: ::core::option::Option<PredicateData>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PredicateData {
    #[prost(string, tag = "1")]
    pub bytecode: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Contract {
    #[prost(enumeration = "AccountType", tag = "1")]
    #[serde(rename = "type")]
    pub r#type: i32,
    #[prost(message, optional, tag = "2")]
    pub pointer: ::core::option::Option<super::pointers::ContractPointer>,
    #[prost(message, optional, tag = "3")]
    #[serde(flatten)]
    pub data: ::core::option::Option<ContractData>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractData {
    #[prost(string, tag = "1")]
    pub bytecode: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub abi: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Script {
    #[prost(enumeration = "AccountType", tag = "1")]
    #[serde(rename = "type")]
    pub r#type: i32,
    #[prost(message, optional, tag = "2")]
    pub pointer: ::core::option::Option<super::pointers::ScriptPointer>,
    #[prost(message, optional, tag = "3")]
    #[serde(flatten)]
    pub data: ::core::option::Option<ScriptData>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScriptData {
    #[prost(string, tag = "1")]
    pub bytecode: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AccountType {
    UnknownAccountType = 0,
    Predicate = 1,
    Contract = 2,
    Script = 3,
}
impl AccountType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownAccountType => "UNKNOWN_ACCOUNT_TYPE",
            Self::Predicate => "PREDICATE",
            Self::Contract => "CONTRACT",
            Self::Script => "SCRIPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_ACCOUNT_TYPE" => Some(Self::UnknownAccountType),
            "PREDICATE" => Some(Self::Predicate),
            "CONTRACT" => Some(Self::Contract),
            "SCRIPT" => Some(Self::Script),
            _ => None,
        }
    }
}
