// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Utxo {
    #[prost(enumeration = "UtxoType", tag = "1")]
    #[serde(rename = "type")]
    pub r#type: i32,
    #[prost(message, optional, tag = "2")]
    pub pointer: ::core::option::Option<super::pointers::UtxoPointer>,
    #[prost(enumeration = "UtxoStatus", tag = "3")]
    pub status: i32,
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
    #[prost(oneof = "utxo::Data", tags = "4, 5, 6")]
    #[serde(flatten)]
    pub data: ::core::option::Option<utxo::Data>,
}
/// Nested message and enum types in `Utxo`.
pub mod utxo {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "SCREAMING_SNAKE_CASE")]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(message, tag = "4")]
        Coin(super::UtxoCoin),
        #[prost(message, tag = "5")]
        Contract(super::UtxoContract),
        #[prost(message, tag = "6")]
        Message(super::UtxoMessage),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UtxoCoin {
    #[prost(int64, tag = "1")]
    pub amount: i64,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UtxoContract {
    #[prost(bytes = "vec", tag = "1")]
    pub contract_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UtxoMessage {
    #[prost(bytes = "vec", tag = "1")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub nonce: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UtxoStatus {
    Unspent = 0,
    Spent = 2,
}
impl UtxoStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspent => "UNSPENT",
            Self::Spent => "SPENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPENT" => Some(Self::Unspent),
            "SPENT" => Some(Self::Spent),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UtxoType {
    Unknown = 0,
    Contract = 1,
    Coin = 2,
    Message = 3,
}
impl UtxoType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Contract => "CONTRACT",
            Self::Coin => "COIN",
            Self::Message => "MESSAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "CONTRACT" => Some(Self::Contract),
            "COIN" => Some(Self::Coin),
            "MESSAGE" => Some(Self::Message),
            _ => None,
        }
    }
}
