// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: accounts.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "./common";
import { ContractPointer, PredicatePointer, ScriptPointer } from "./pointers";

export const protobufPackage = "accounts";

export enum AccountType {
  UNKNOWN_ACCOUNT_TYPE = 0,
  PREDICATE = 1,
  CONTRACT = 2,
  SCRIPT = 3,
  UNRECOGNIZED = -1,
}

export function accountTypeFromJSON(object: any): AccountType {
  switch (object) {
    case 0:
    case "UNKNOWN_ACCOUNT_TYPE":
      return AccountType.UNKNOWN_ACCOUNT_TYPE;
    case 1:
    case "PREDICATE":
      return AccountType.PREDICATE;
    case 2:
    case "CONTRACT":
      return AccountType.CONTRACT;
    case 3:
    case "SCRIPT":
      return AccountType.SCRIPT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountType.UNRECOGNIZED;
  }
}

export function accountTypeToJSON(object: AccountType): string {
  switch (object) {
    case AccountType.UNKNOWN_ACCOUNT_TYPE:
      return "UNKNOWN_ACCOUNT_TYPE";
    case AccountType.PREDICATE:
      return "PREDICATE";
    case AccountType.CONTRACT:
      return "CONTRACT";
    case AccountType.SCRIPT:
      return "SCRIPT";
    case AccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Predicate {
  type: AccountType;
  pointer: PredicatePointer | undefined;
  data: PredicateData | undefined;
  metadata: Metadata | undefined;
}

export interface PredicateData {
  bytecode: string;
}

export interface Contract {
  type: AccountType;
  pointer: ContractPointer | undefined;
  data: ContractData | undefined;
  metadata: Metadata | undefined;
}

export interface ContractData {
  bytecode: string;
  abi: string;
}

export interface Script {
  type: AccountType;
  pointer: ScriptPointer | undefined;
  data: ScriptData | undefined;
  metadata: Metadata | undefined;
}

export interface ScriptData {
  bytecode: string;
}

function createBasePredicate(): Predicate {
  return { type: 0, pointer: undefined, data: undefined, metadata: undefined };
}

export const Predicate: MessageFns<Predicate> = {
  encode(message: Predicate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pointer !== undefined) {
      PredicatePointer.encode(message.pointer, writer.uint32(18).fork()).join();
    }
    if (message.data !== undefined) {
      PredicateData.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Predicate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredicate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pointer = PredicatePointer.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = PredicateData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Predicate {
    return {
      type: isSet(object.type) ? accountTypeFromJSON(object.type) : 0,
      pointer: isSet(object.pointer) ? PredicatePointer.fromJSON(object.pointer) : undefined,
      data: isSet(object.data) ? PredicateData.fromJSON(object.data) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Predicate): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = accountTypeToJSON(message.type);
    }
    if (message.pointer !== undefined) {
      obj.pointer = PredicatePointer.toJSON(message.pointer);
    }
    if (message.data !== undefined) {
      obj.data = PredicateData.toJSON(message.data);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Predicate>, I>>(base?: I): Predicate {
    return Predicate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Predicate>, I>>(object: I): Predicate {
    const message = createBasePredicate();
    message.type = object.type ?? 0;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? PredicatePointer.fromPartial(object.pointer)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null)
      ? PredicateData.fromPartial(object.data)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBasePredicateData(): PredicateData {
  return { bytecode: "" };
}

export const PredicateData: MessageFns<PredicateData> = {
  encode(message: PredicateData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bytecode !== "") {
      writer.uint32(10).string(message.bytecode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredicateData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredicateData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bytecode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredicateData {
    return { bytecode: isSet(object.bytecode) ? globalThis.String(object.bytecode) : "" };
  },

  toJSON(message: PredicateData): unknown {
    const obj: any = {};
    if (message.bytecode !== "") {
      obj.bytecode = message.bytecode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PredicateData>, I>>(base?: I): PredicateData {
    return PredicateData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PredicateData>, I>>(object: I): PredicateData {
    const message = createBasePredicateData();
    message.bytecode = object.bytecode ?? "";
    return message;
  },
};

function createBaseContract(): Contract {
  return { type: 0, pointer: undefined, data: undefined, metadata: undefined };
}

export const Contract: MessageFns<Contract> = {
  encode(message: Contract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pointer !== undefined) {
      ContractPointer.encode(message.pointer, writer.uint32(18).fork()).join();
    }
    if (message.data !== undefined) {
      ContractData.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Contract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pointer = ContractPointer.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ContractData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Contract {
    return {
      type: isSet(object.type) ? accountTypeFromJSON(object.type) : 0,
      pointer: isSet(object.pointer) ? ContractPointer.fromJSON(object.pointer) : undefined,
      data: isSet(object.data) ? ContractData.fromJSON(object.data) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Contract): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = accountTypeToJSON(message.type);
    }
    if (message.pointer !== undefined) {
      obj.pointer = ContractPointer.toJSON(message.pointer);
    }
    if (message.data !== undefined) {
      obj.data = ContractData.toJSON(message.data);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Contract>, I>>(base?: I): Contract {
    return Contract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Contract>, I>>(object: I): Contract {
    const message = createBaseContract();
    message.type = object.type ?? 0;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? ContractPointer.fromPartial(object.pointer)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null)
      ? ContractData.fromPartial(object.data)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseContractData(): ContractData {
  return { bytecode: "", abi: "" };
}

export const ContractData: MessageFns<ContractData> = {
  encode(message: ContractData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bytecode !== "") {
      writer.uint32(10).string(message.bytecode);
    }
    if (message.abi !== "") {
      writer.uint32(18).string(message.abi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContractData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bytecode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.abi = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContractData {
    return {
      bytecode: isSet(object.bytecode) ? globalThis.String(object.bytecode) : "",
      abi: isSet(object.abi) ? globalThis.String(object.abi) : "",
    };
  },

  toJSON(message: ContractData): unknown {
    const obj: any = {};
    if (message.bytecode !== "") {
      obj.bytecode = message.bytecode;
    }
    if (message.abi !== "") {
      obj.abi = message.abi;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContractData>, I>>(base?: I): ContractData {
    return ContractData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContractData>, I>>(object: I): ContractData {
    const message = createBaseContractData();
    message.bytecode = object.bytecode ?? "";
    message.abi = object.abi ?? "";
    return message;
  },
};

function createBaseScript(): Script {
  return { type: 0, pointer: undefined, data: undefined, metadata: undefined };
}

export const Script: MessageFns<Script> = {
  encode(message: Script, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pointer !== undefined) {
      ScriptPointer.encode(message.pointer, writer.uint32(18).fork()).join();
    }
    if (message.data !== undefined) {
      ScriptData.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Script {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScript();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pointer = ScriptPointer.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ScriptData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Script {
    return {
      type: isSet(object.type) ? accountTypeFromJSON(object.type) : 0,
      pointer: isSet(object.pointer) ? ScriptPointer.fromJSON(object.pointer) : undefined,
      data: isSet(object.data) ? ScriptData.fromJSON(object.data) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Script): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = accountTypeToJSON(message.type);
    }
    if (message.pointer !== undefined) {
      obj.pointer = ScriptPointer.toJSON(message.pointer);
    }
    if (message.data !== undefined) {
      obj.data = ScriptData.toJSON(message.data);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Script>, I>>(base?: I): Script {
    return Script.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Script>, I>>(object: I): Script {
    const message = createBaseScript();
    message.type = object.type ?? 0;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? ScriptPointer.fromPartial(object.pointer)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null)
      ? ScriptData.fromPartial(object.data)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseScriptData(): ScriptData {
  return { bytecode: "" };
}

export const ScriptData: MessageFns<ScriptData> = {
  encode(message: ScriptData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bytecode !== "") {
      writer.uint32(10).string(message.bytecode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScriptData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScriptData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bytecode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScriptData {
    return { bytecode: isSet(object.bytecode) ? globalThis.String(object.bytecode) : "" };
  },

  toJSON(message: ScriptData): unknown {
    const obj: any = {};
    if (message.bytecode !== "") {
      obj.bytecode = message.bytecode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScriptData>, I>>(base?: I): ScriptData {
    return ScriptData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScriptData>, I>>(object: I): ScriptData {
    const message = createBaseScriptData();
    message.bytecode = object.bytecode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
