// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: blocks.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { BlockPointer } from "./pointers";

export const protobufPackage = "blocks";

export enum ConsensusType {
  GENESIS = 0,
  POA_CONSENSUS = 1,
  UNRECOGNIZED = -1,
}

export function consensusTypeFromJSON(object: any): ConsensusType {
  switch (object) {
    case 0:
    case "GENESIS":
      return ConsensusType.GENESIS;
    case 1:
    case "POA_CONSENSUS":
      return ConsensusType.POA_CONSENSUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConsensusType.UNRECOGNIZED;
  }
}

export function consensusTypeToJSON(object: ConsensusType): string {
  switch (object) {
    case ConsensusType.GENESIS:
      return "GENESIS";
    case ConsensusType.POA_CONSENSUS:
      return "POA_CONSENSUS";
    case ConsensusType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Block {
  subject: string;
  blockHeight: number;
  producerAddress: Uint8Array;
  blockId: number;
  version: string;
  /** Relationship fields */
  header: BlockHeader | undefined;
  consensus:
    | BlockConsensus
    | undefined;
  /** Array of tx_ids in this block */
  transactionIds: Uint8Array[];
  /** Metadata */
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
  pointer: BlockPointer | undefined;
}

export interface BlockHeader {
  subject: string;
  blockHeight: number;
  applicationHash: Uint8Array;
  consensusParametersVersion: number;
  daHeight: number;
  eventInboxRoot: Uint8Array;
  messageOutboxRoot: Uint8Array;
  messageReceiptCount: number;
  prevRoot: Uint8Array;
  stateTransitionBytecodeVersion: number;
  time: number;
  transactionsCount: number;
  transactionsRoot: Uint8Array;
  version: number;
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
}

export interface BlockConsensus {
  subject: string;
  blockHeight: number;
  consensusType: ConsensusType;
  chainConfigHash: Uint8Array;
  coinsRoot: Uint8Array;
  contractsRoot: Uint8Array;
  messagesRoot: Uint8Array;
  transactionsRoot: Uint8Array;
  signature: Uint8Array;
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
}

function createBaseBlock(): Block {
  return {
    subject: "",
    blockHeight: 0,
    producerAddress: new Uint8Array(0),
    blockId: 0,
    version: "",
    header: undefined,
    consensus: undefined,
    transactionIds: [],
    createdAt: undefined,
    publishedAt: undefined,
    pointer: undefined,
  };
}

export const Block: MessageFns<Block> = {
  encode(message: Block, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.producerAddress.length !== 0) {
      writer.uint32(26).bytes(message.producerAddress);
    }
    if (message.blockId !== 0) {
      writer.uint32(32).int32(message.blockId);
    }
    if (message.version !== "") {
      writer.uint32(42).string(message.version);
    }
    if (message.header !== undefined) {
      BlockHeader.encode(message.header, writer.uint32(50).fork()).join();
    }
    if (message.consensus !== undefined) {
      BlockConsensus.encode(message.consensus, writer.uint32(58).fork()).join();
    }
    for (const v of message.transactionIds) {
      writer.uint32(66).bytes(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(74).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(82).fork()).join();
    }
    if (message.pointer !== undefined) {
      BlockPointer.encode(message.pointer, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Block {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.producerAddress = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.blockId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.header = BlockHeader.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.consensus = BlockConsensus.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.transactionIds.push(reader.bytes());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.pointer = BlockPointer.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      producerAddress: isSet(object.producerAddress) ? bytesFromBase64(object.producerAddress) : new Uint8Array(0),
      blockId: isSet(object.blockId) ? globalThis.Number(object.blockId) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      header: isSet(object.header) ? BlockHeader.fromJSON(object.header) : undefined,
      consensus: isSet(object.consensus) ? BlockConsensus.fromJSON(object.consensus) : undefined,
      transactionIds: globalThis.Array.isArray(object?.transactionIds)
        ? object.transactionIds.map((e: any) => bytesFromBase64(e))
        : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
      pointer: isSet(object.pointer) ? BlockPointer.fromJSON(object.pointer) : undefined,
    };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.producerAddress.length !== 0) {
      obj.producerAddress = base64FromBytes(message.producerAddress);
    }
    if (message.blockId !== 0) {
      obj.blockId = Math.round(message.blockId);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.header !== undefined) {
      obj.header = BlockHeader.toJSON(message.header);
    }
    if (message.consensus !== undefined) {
      obj.consensus = BlockConsensus.toJSON(message.consensus);
    }
    if (message.transactionIds?.length) {
      obj.transactionIds = message.transactionIds.map((e) => base64FromBytes(e));
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    if (message.pointer !== undefined) {
      obj.pointer = BlockPointer.toJSON(message.pointer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Block>, I>>(base?: I): Block {
    return Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Block>, I>>(object: I): Block {
    const message = createBaseBlock();
    message.subject = object.subject ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.producerAddress = object.producerAddress ?? new Uint8Array(0);
    message.blockId = object.blockId ?? 0;
    message.version = object.version ?? "";
    message.header = (object.header !== undefined && object.header !== null)
      ? BlockHeader.fromPartial(object.header)
      : undefined;
    message.consensus = (object.consensus !== undefined && object.consensus !== null)
      ? BlockConsensus.fromPartial(object.consensus)
      : undefined;
    message.transactionIds = object.transactionIds?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? BlockPointer.fromPartial(object.pointer)
      : undefined;
    return message;
  },
};

function createBaseBlockHeader(): BlockHeader {
  return {
    subject: "",
    blockHeight: 0,
    applicationHash: new Uint8Array(0),
    consensusParametersVersion: 0,
    daHeight: 0,
    eventInboxRoot: new Uint8Array(0),
    messageOutboxRoot: new Uint8Array(0),
    messageReceiptCount: 0,
    prevRoot: new Uint8Array(0),
    stateTransitionBytecodeVersion: 0,
    time: 0,
    transactionsCount: 0,
    transactionsRoot: new Uint8Array(0),
    version: 0,
    createdAt: undefined,
    publishedAt: undefined,
  };
}

export const BlockHeader: MessageFns<BlockHeader> = {
  encode(message: BlockHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.applicationHash.length !== 0) {
      writer.uint32(26).bytes(message.applicationHash);
    }
    if (message.consensusParametersVersion !== 0) {
      writer.uint32(32).int32(message.consensusParametersVersion);
    }
    if (message.daHeight !== 0) {
      writer.uint32(40).int64(message.daHeight);
    }
    if (message.eventInboxRoot.length !== 0) {
      writer.uint32(50).bytes(message.eventInboxRoot);
    }
    if (message.messageOutboxRoot.length !== 0) {
      writer.uint32(58).bytes(message.messageOutboxRoot);
    }
    if (message.messageReceiptCount !== 0) {
      writer.uint32(64).int32(message.messageReceiptCount);
    }
    if (message.prevRoot.length !== 0) {
      writer.uint32(74).bytes(message.prevRoot);
    }
    if (message.stateTransitionBytecodeVersion !== 0) {
      writer.uint32(80).int32(message.stateTransitionBytecodeVersion);
    }
    if (message.time !== 0) {
      writer.uint32(88).int64(message.time);
    }
    if (message.transactionsCount !== 0) {
      writer.uint32(96).int32(message.transactionsCount);
    }
    if (message.transactionsRoot.length !== 0) {
      writer.uint32(106).bytes(message.transactionsRoot);
    }
    if (message.version !== 0) {
      writer.uint32(112).int32(message.version);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(122).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.applicationHash = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.consensusParametersVersion = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.daHeight = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.eventInboxRoot = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.messageOutboxRoot = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.messageReceiptCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.prevRoot = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.stateTransitionBytecodeVersion = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.time = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.transactionsCount = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.transactionsRoot = reader.bytes();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockHeader {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      applicationHash: isSet(object.applicationHash) ? bytesFromBase64(object.applicationHash) : new Uint8Array(0),
      consensusParametersVersion: isSet(object.consensusParametersVersion)
        ? globalThis.Number(object.consensusParametersVersion)
        : 0,
      daHeight: isSet(object.daHeight) ? globalThis.Number(object.daHeight) : 0,
      eventInboxRoot: isSet(object.eventInboxRoot) ? bytesFromBase64(object.eventInboxRoot) : new Uint8Array(0),
      messageOutboxRoot: isSet(object.messageOutboxRoot)
        ? bytesFromBase64(object.messageOutboxRoot)
        : new Uint8Array(0),
      messageReceiptCount: isSet(object.messageReceiptCount) ? globalThis.Number(object.messageReceiptCount) : 0,
      prevRoot: isSet(object.prevRoot) ? bytesFromBase64(object.prevRoot) : new Uint8Array(0),
      stateTransitionBytecodeVersion: isSet(object.stateTransitionBytecodeVersion)
        ? globalThis.Number(object.stateTransitionBytecodeVersion)
        : 0,
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
      transactionsCount: isSet(object.transactionsCount) ? globalThis.Number(object.transactionsCount) : 0,
      transactionsRoot: isSet(object.transactionsRoot) ? bytesFromBase64(object.transactionsRoot) : new Uint8Array(0),
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
    };
  },

  toJSON(message: BlockHeader): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.applicationHash.length !== 0) {
      obj.applicationHash = base64FromBytes(message.applicationHash);
    }
    if (message.consensusParametersVersion !== 0) {
      obj.consensusParametersVersion = Math.round(message.consensusParametersVersion);
    }
    if (message.daHeight !== 0) {
      obj.daHeight = Math.round(message.daHeight);
    }
    if (message.eventInboxRoot.length !== 0) {
      obj.eventInboxRoot = base64FromBytes(message.eventInboxRoot);
    }
    if (message.messageOutboxRoot.length !== 0) {
      obj.messageOutboxRoot = base64FromBytes(message.messageOutboxRoot);
    }
    if (message.messageReceiptCount !== 0) {
      obj.messageReceiptCount = Math.round(message.messageReceiptCount);
    }
    if (message.prevRoot.length !== 0) {
      obj.prevRoot = base64FromBytes(message.prevRoot);
    }
    if (message.stateTransitionBytecodeVersion !== 0) {
      obj.stateTransitionBytecodeVersion = Math.round(message.stateTransitionBytecodeVersion);
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    if (message.transactionsCount !== 0) {
      obj.transactionsCount = Math.round(message.transactionsCount);
    }
    if (message.transactionsRoot.length !== 0) {
      obj.transactionsRoot = base64FromBytes(message.transactionsRoot);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockHeader>, I>>(base?: I): BlockHeader {
    return BlockHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockHeader>, I>>(object: I): BlockHeader {
    const message = createBaseBlockHeader();
    message.subject = object.subject ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.applicationHash = object.applicationHash ?? new Uint8Array(0);
    message.consensusParametersVersion = object.consensusParametersVersion ?? 0;
    message.daHeight = object.daHeight ?? 0;
    message.eventInboxRoot = object.eventInboxRoot ?? new Uint8Array(0);
    message.messageOutboxRoot = object.messageOutboxRoot ?? new Uint8Array(0);
    message.messageReceiptCount = object.messageReceiptCount ?? 0;
    message.prevRoot = object.prevRoot ?? new Uint8Array(0);
    message.stateTransitionBytecodeVersion = object.stateTransitionBytecodeVersion ?? 0;
    message.time = object.time ?? 0;
    message.transactionsCount = object.transactionsCount ?? 0;
    message.transactionsRoot = object.transactionsRoot ?? new Uint8Array(0);
    message.version = object.version ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    return message;
  },
};

function createBaseBlockConsensus(): BlockConsensus {
  return {
    subject: "",
    blockHeight: 0,
    consensusType: 0,
    chainConfigHash: new Uint8Array(0),
    coinsRoot: new Uint8Array(0),
    contractsRoot: new Uint8Array(0),
    messagesRoot: new Uint8Array(0),
    transactionsRoot: new Uint8Array(0),
    signature: new Uint8Array(0),
    createdAt: undefined,
    publishedAt: undefined,
  };
}

export const BlockConsensus: MessageFns<BlockConsensus> = {
  encode(message: BlockConsensus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.consensusType !== 0) {
      writer.uint32(24).int32(message.consensusType);
    }
    if (message.chainConfigHash.length !== 0) {
      writer.uint32(34).bytes(message.chainConfigHash);
    }
    if (message.coinsRoot.length !== 0) {
      writer.uint32(42).bytes(message.coinsRoot);
    }
    if (message.contractsRoot.length !== 0) {
      writer.uint32(50).bytes(message.contractsRoot);
    }
    if (message.messagesRoot.length !== 0) {
      writer.uint32(58).bytes(message.messagesRoot);
    }
    if (message.transactionsRoot.length !== 0) {
      writer.uint32(66).bytes(message.transactionsRoot);
    }
    if (message.signature.length !== 0) {
      writer.uint32(74).bytes(message.signature);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockConsensus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockConsensus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.consensusType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chainConfigHash = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.coinsRoot = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.contractsRoot = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.messagesRoot = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.transactionsRoot = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockConsensus {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      consensusType: isSet(object.consensusType) ? consensusTypeFromJSON(object.consensusType) : 0,
      chainConfigHash: isSet(object.chainConfigHash) ? bytesFromBase64(object.chainConfigHash) : new Uint8Array(0),
      coinsRoot: isSet(object.coinsRoot) ? bytesFromBase64(object.coinsRoot) : new Uint8Array(0),
      contractsRoot: isSet(object.contractsRoot) ? bytesFromBase64(object.contractsRoot) : new Uint8Array(0),
      messagesRoot: isSet(object.messagesRoot) ? bytesFromBase64(object.messagesRoot) : new Uint8Array(0),
      transactionsRoot: isSet(object.transactionsRoot) ? bytesFromBase64(object.transactionsRoot) : new Uint8Array(0),
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
    };
  },

  toJSON(message: BlockConsensus): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.consensusType !== 0) {
      obj.consensusType = consensusTypeToJSON(message.consensusType);
    }
    if (message.chainConfigHash.length !== 0) {
      obj.chainConfigHash = base64FromBytes(message.chainConfigHash);
    }
    if (message.coinsRoot.length !== 0) {
      obj.coinsRoot = base64FromBytes(message.coinsRoot);
    }
    if (message.contractsRoot.length !== 0) {
      obj.contractsRoot = base64FromBytes(message.contractsRoot);
    }
    if (message.messagesRoot.length !== 0) {
      obj.messagesRoot = base64FromBytes(message.messagesRoot);
    }
    if (message.transactionsRoot.length !== 0) {
      obj.transactionsRoot = base64FromBytes(message.transactionsRoot);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockConsensus>, I>>(base?: I): BlockConsensus {
    return BlockConsensus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockConsensus>, I>>(object: I): BlockConsensus {
    const message = createBaseBlockConsensus();
    message.subject = object.subject ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.consensusType = object.consensusType ?? 0;
    message.chainConfigHash = object.chainConfigHash ?? new Uint8Array(0);
    message.coinsRoot = object.coinsRoot ?? new Uint8Array(0);
    message.contractsRoot = object.contractsRoot ?? new Uint8Array(0);
    message.messagesRoot = object.messagesRoot ?? new Uint8Array(0);
    message.transactionsRoot = object.transactionsRoot ?? new Uint8Array(0);
    message.signature = object.signature ?? new Uint8Array(0);
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
