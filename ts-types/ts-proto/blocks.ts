// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: blocks.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BlockMetadata } from "./common";
import { BlockPointer } from "./pointers";

export const protobufPackage = "blocks";

export enum ConsensusType {
  UNKNOWN_CONSENSUS_TYPE = 0,
  GENESIS = 1,
  POA_CONSENSUS = 2,
  UNRECOGNIZED = -1,
}

export function consensusTypeFromJSON(object: any): ConsensusType {
  switch (object) {
    case 0:
    case "UNKNOWN_CONSENSUS_TYPE":
      return ConsensusType.UNKNOWN_CONSENSUS_TYPE;
    case 1:
    case "GENESIS":
      return ConsensusType.GENESIS;
    case 2:
    case "POA_CONSENSUS":
      return ConsensusType.POA_CONSENSUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConsensusType.UNRECOGNIZED;
  }
}

export function consensusTypeToJSON(object: ConsensusType): string {
  switch (object) {
    case ConsensusType.UNKNOWN_CONSENSUS_TYPE:
      return "UNKNOWN_CONSENSUS_TYPE";
    case ConsensusType.GENESIS:
      return "GENESIS";
    case ConsensusType.POA_CONSENSUS:
      return "POA_CONSENSUS";
    case ConsensusType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Block {
  pointer: BlockPointer | undefined;
  data: BlockData | undefined;
  metadata: BlockMetadata | undefined;
}

export interface BlockData {
  version: string;
  id: number;
  header: BlockHeader | undefined;
  consensusType: ConsensusType;
  genesis?: BlockConsensusGenesis | undefined;
  poa?: BlockConsensusPoa | undefined;
  transactionIds: string[];
}

export interface BlockHeader {
  version: string;
  id: string;
  chainId: number;
  producer: string;
  height: number;
  daHeight: number;
  consensusParametersVersion: number;
  stateTransitionBytecodeVersion: number;
  transactionsCount: number;
  messageReceiptCount: number;
  transactionsRoot: string;
  messageOutboxRoot: string;
  eventInboxRoot: string;
  prevRoot: string;
  time: number;
  applicationHash: string;
}

export interface BlockConsensusGenesis {
  chainConfigHash: string;
  coinsRoot: string;
  contractsRoot: string;
  messagesRoot: string;
  transactionsRoot: string;
}

export interface BlockConsensusPoa {
  signature: string;
}

function createBaseBlock(): Block {
  return { pointer: undefined, data: undefined, metadata: undefined };
}

export const Block: MessageFns<Block> = {
  encode(message: Block, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pointer !== undefined) {
      BlockPointer.encode(message.pointer, writer.uint32(10).fork()).join();
    }
    if (message.data !== undefined) {
      BlockData.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      BlockMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Block {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pointer = BlockPointer.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = BlockData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = BlockMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return {
      pointer: isSet(object.pointer) ? BlockPointer.fromJSON(object.pointer) : undefined,
      data: isSet(object.data) ? BlockData.fromJSON(object.data) : undefined,
      metadata: isSet(object.metadata) ? BlockMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    if (message.pointer !== undefined) {
      obj.pointer = BlockPointer.toJSON(message.pointer);
    }
    if (message.data !== undefined) {
      obj.data = BlockData.toJSON(message.data);
    }
    if (message.metadata !== undefined) {
      obj.metadata = BlockMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Block>, I>>(base?: I): Block {
    return Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Block>, I>>(object: I): Block {
    const message = createBaseBlock();
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? BlockPointer.fromPartial(object.pointer)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null) ? BlockData.fromPartial(object.data) : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? BlockMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseBlockData(): BlockData {
  return {
    version: "",
    id: 0,
    header: undefined,
    consensusType: 0,
    genesis: undefined,
    poa: undefined,
    transactionIds: [],
  };
}

export const BlockData: MessageFns<BlockData> = {
  encode(message: BlockData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.header !== undefined) {
      BlockHeader.encode(message.header, writer.uint32(34).fork()).join();
    }
    if (message.consensusType !== 0) {
      writer.uint32(40).int32(message.consensusType);
    }
    if (message.genesis !== undefined) {
      BlockConsensusGenesis.encode(message.genesis, writer.uint32(50).fork()).join();
    }
    if (message.poa !== undefined) {
      BlockConsensusPoa.encode(message.poa, writer.uint32(58).fork()).join();
    }
    for (const v of message.transactionIds) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.header = BlockHeader.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.consensusType = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.genesis = BlockConsensusGenesis.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.poa = BlockConsensusPoa.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.transactionIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockData {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      header: isSet(object.header) ? BlockHeader.fromJSON(object.header) : undefined,
      consensusType: isSet(object.consensusType) ? consensusTypeFromJSON(object.consensusType) : 0,
      genesis: isSet(object.genesis) ? BlockConsensusGenesis.fromJSON(object.genesis) : undefined,
      poa: isSet(object.poa) ? BlockConsensusPoa.fromJSON(object.poa) : undefined,
      transactionIds: globalThis.Array.isArray(object?.transactionIds)
        ? object.transactionIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BlockData): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.header !== undefined) {
      obj.header = BlockHeader.toJSON(message.header);
    }
    if (message.consensusType !== 0) {
      obj.consensusType = consensusTypeToJSON(message.consensusType);
    }
    if (message.genesis !== undefined) {
      obj.genesis = BlockConsensusGenesis.toJSON(message.genesis);
    }
    if (message.poa !== undefined) {
      obj.poa = BlockConsensusPoa.toJSON(message.poa);
    }
    if (message.transactionIds?.length) {
      obj.transactionIds = message.transactionIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockData>, I>>(base?: I): BlockData {
    return BlockData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockData>, I>>(object: I): BlockData {
    const message = createBaseBlockData();
    message.version = object.version ?? "";
    message.id = object.id ?? 0;
    message.header = (object.header !== undefined && object.header !== null)
      ? BlockHeader.fromPartial(object.header)
      : undefined;
    message.consensusType = object.consensusType ?? 0;
    message.genesis = (object.genesis !== undefined && object.genesis !== null)
      ? BlockConsensusGenesis.fromPartial(object.genesis)
      : undefined;
    message.poa = (object.poa !== undefined && object.poa !== null)
      ? BlockConsensusPoa.fromPartial(object.poa)
      : undefined;
    message.transactionIds = object.transactionIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseBlockHeader(): BlockHeader {
  return {
    version: "",
    id: "",
    chainId: 0,
    producer: "",
    height: 0,
    daHeight: 0,
    consensusParametersVersion: 0,
    stateTransitionBytecodeVersion: 0,
    transactionsCount: 0,
    messageReceiptCount: 0,
    transactionsRoot: "",
    messageOutboxRoot: "",
    eventInboxRoot: "",
    prevRoot: "",
    time: 0,
    applicationHash: "",
  };
}

export const BlockHeader: MessageFns<BlockHeader> = {
  encode(message: BlockHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.chainId !== 0) {
      writer.uint32(24).int64(message.chainId);
    }
    if (message.producer !== "") {
      writer.uint32(34).string(message.producer);
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.daHeight !== 0) {
      writer.uint32(48).int64(message.daHeight);
    }
    if (message.consensusParametersVersion !== 0) {
      writer.uint32(56).int32(message.consensusParametersVersion);
    }
    if (message.stateTransitionBytecodeVersion !== 0) {
      writer.uint32(64).int32(message.stateTransitionBytecodeVersion);
    }
    if (message.transactionsCount !== 0) {
      writer.uint32(72).int32(message.transactionsCount);
    }
    if (message.messageReceiptCount !== 0) {
      writer.uint32(80).int32(message.messageReceiptCount);
    }
    if (message.transactionsRoot !== "") {
      writer.uint32(90).string(message.transactionsRoot);
    }
    if (message.messageOutboxRoot !== "") {
      writer.uint32(98).string(message.messageOutboxRoot);
    }
    if (message.eventInboxRoot !== "") {
      writer.uint32(106).string(message.eventInboxRoot);
    }
    if (message.prevRoot !== "") {
      writer.uint32(114).string(message.prevRoot);
    }
    if (message.time !== 0) {
      writer.uint32(120).int64(message.time);
    }
    if (message.applicationHash !== "") {
      writer.uint32(130).string(message.applicationHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chainId = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.producer = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.daHeight = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.consensusParametersVersion = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.stateTransitionBytecodeVersion = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.transactionsCount = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.messageReceiptCount = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.transactionsRoot = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.messageOutboxRoot = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.eventInboxRoot = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.prevRoot = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.time = longToNumber(reader.int64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.applicationHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockHeader {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
      producer: isSet(object.producer) ? globalThis.String(object.producer) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      daHeight: isSet(object.daHeight) ? globalThis.Number(object.daHeight) : 0,
      consensusParametersVersion: isSet(object.consensusParametersVersion)
        ? globalThis.Number(object.consensusParametersVersion)
        : 0,
      stateTransitionBytecodeVersion: isSet(object.stateTransitionBytecodeVersion)
        ? globalThis.Number(object.stateTransitionBytecodeVersion)
        : 0,
      transactionsCount: isSet(object.transactionsCount) ? globalThis.Number(object.transactionsCount) : 0,
      messageReceiptCount: isSet(object.messageReceiptCount) ? globalThis.Number(object.messageReceiptCount) : 0,
      transactionsRoot: isSet(object.transactionsRoot) ? globalThis.String(object.transactionsRoot) : "",
      messageOutboxRoot: isSet(object.messageOutboxRoot) ? globalThis.String(object.messageOutboxRoot) : "",
      eventInboxRoot: isSet(object.eventInboxRoot) ? globalThis.String(object.eventInboxRoot) : "",
      prevRoot: isSet(object.prevRoot) ? globalThis.String(object.prevRoot) : "",
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
      applicationHash: isSet(object.applicationHash) ? globalThis.String(object.applicationHash) : "",
    };
  },

  toJSON(message: BlockHeader): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    if (message.producer !== "") {
      obj.producer = message.producer;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.daHeight !== 0) {
      obj.daHeight = Math.round(message.daHeight);
    }
    if (message.consensusParametersVersion !== 0) {
      obj.consensusParametersVersion = Math.round(message.consensusParametersVersion);
    }
    if (message.stateTransitionBytecodeVersion !== 0) {
      obj.stateTransitionBytecodeVersion = Math.round(message.stateTransitionBytecodeVersion);
    }
    if (message.transactionsCount !== 0) {
      obj.transactionsCount = Math.round(message.transactionsCount);
    }
    if (message.messageReceiptCount !== 0) {
      obj.messageReceiptCount = Math.round(message.messageReceiptCount);
    }
    if (message.transactionsRoot !== "") {
      obj.transactionsRoot = message.transactionsRoot;
    }
    if (message.messageOutboxRoot !== "") {
      obj.messageOutboxRoot = message.messageOutboxRoot;
    }
    if (message.eventInboxRoot !== "") {
      obj.eventInboxRoot = message.eventInboxRoot;
    }
    if (message.prevRoot !== "") {
      obj.prevRoot = message.prevRoot;
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    if (message.applicationHash !== "") {
      obj.applicationHash = message.applicationHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockHeader>, I>>(base?: I): BlockHeader {
    return BlockHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockHeader>, I>>(object: I): BlockHeader {
    const message = createBaseBlockHeader();
    message.version = object.version ?? "";
    message.id = object.id ?? "";
    message.chainId = object.chainId ?? 0;
    message.producer = object.producer ?? "";
    message.height = object.height ?? 0;
    message.daHeight = object.daHeight ?? 0;
    message.consensusParametersVersion = object.consensusParametersVersion ?? 0;
    message.stateTransitionBytecodeVersion = object.stateTransitionBytecodeVersion ?? 0;
    message.transactionsCount = object.transactionsCount ?? 0;
    message.messageReceiptCount = object.messageReceiptCount ?? 0;
    message.transactionsRoot = object.transactionsRoot ?? "";
    message.messageOutboxRoot = object.messageOutboxRoot ?? "";
    message.eventInboxRoot = object.eventInboxRoot ?? "";
    message.prevRoot = object.prevRoot ?? "";
    message.time = object.time ?? 0;
    message.applicationHash = object.applicationHash ?? "";
    return message;
  },
};

function createBaseBlockConsensusGenesis(): BlockConsensusGenesis {
  return { chainConfigHash: "", coinsRoot: "", contractsRoot: "", messagesRoot: "", transactionsRoot: "" };
}

export const BlockConsensusGenesis: MessageFns<BlockConsensusGenesis> = {
  encode(message: BlockConsensusGenesis, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainConfigHash !== "") {
      writer.uint32(10).string(message.chainConfigHash);
    }
    if (message.coinsRoot !== "") {
      writer.uint32(18).string(message.coinsRoot);
    }
    if (message.contractsRoot !== "") {
      writer.uint32(26).string(message.contractsRoot);
    }
    if (message.messagesRoot !== "") {
      writer.uint32(34).string(message.messagesRoot);
    }
    if (message.transactionsRoot !== "") {
      writer.uint32(42).string(message.transactionsRoot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockConsensusGenesis {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockConsensusGenesis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chainConfigHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.coinsRoot = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contractsRoot = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.messagesRoot = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.transactionsRoot = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockConsensusGenesis {
    return {
      chainConfigHash: isSet(object.chainConfigHash) ? globalThis.String(object.chainConfigHash) : "",
      coinsRoot: isSet(object.coinsRoot) ? globalThis.String(object.coinsRoot) : "",
      contractsRoot: isSet(object.contractsRoot) ? globalThis.String(object.contractsRoot) : "",
      messagesRoot: isSet(object.messagesRoot) ? globalThis.String(object.messagesRoot) : "",
      transactionsRoot: isSet(object.transactionsRoot) ? globalThis.String(object.transactionsRoot) : "",
    };
  },

  toJSON(message: BlockConsensusGenesis): unknown {
    const obj: any = {};
    if (message.chainConfigHash !== "") {
      obj.chainConfigHash = message.chainConfigHash;
    }
    if (message.coinsRoot !== "") {
      obj.coinsRoot = message.coinsRoot;
    }
    if (message.contractsRoot !== "") {
      obj.contractsRoot = message.contractsRoot;
    }
    if (message.messagesRoot !== "") {
      obj.messagesRoot = message.messagesRoot;
    }
    if (message.transactionsRoot !== "") {
      obj.transactionsRoot = message.transactionsRoot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockConsensusGenesis>, I>>(base?: I): BlockConsensusGenesis {
    return BlockConsensusGenesis.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockConsensusGenesis>, I>>(object: I): BlockConsensusGenesis {
    const message = createBaseBlockConsensusGenesis();
    message.chainConfigHash = object.chainConfigHash ?? "";
    message.coinsRoot = object.coinsRoot ?? "";
    message.contractsRoot = object.contractsRoot ?? "";
    message.messagesRoot = object.messagesRoot ?? "";
    message.transactionsRoot = object.transactionsRoot ?? "";
    return message;
  },
};

function createBaseBlockConsensusPoa(): BlockConsensusPoa {
  return { signature: "" };
}

export const BlockConsensusPoa: MessageFns<BlockConsensusPoa> = {
  encode(message: BlockConsensusPoa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockConsensusPoa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockConsensusPoa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockConsensusPoa {
    return { signature: isSet(object.signature) ? globalThis.String(object.signature) : "" };
  },

  toJSON(message: BlockConsensusPoa): unknown {
    const obj: any = {};
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockConsensusPoa>, I>>(base?: I): BlockConsensusPoa {
    return BlockConsensusPoa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockConsensusPoa>, I>>(object: I): BlockConsensusPoa {
    const message = createBaseBlockConsensusPoa();
    message.signature = object.signature ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
