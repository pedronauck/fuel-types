// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: utxos.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { UtxoPointer } from "./pointers";

export const protobufPackage = "utxos";

export enum UtxoType {
  CONTRACT = 0,
  COIN = 1,
  MESSAGE = 2,
  UNRECOGNIZED = -1,
}

export function utxoTypeFromJSON(object: any): UtxoType {
  switch (object) {
    case 0:
    case "CONTRACT":
      return UtxoType.CONTRACT;
    case 1:
    case "COIN":
      return UtxoType.COIN;
    case 2:
    case "MESSAGE":
      return UtxoType.MESSAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UtxoType.UNRECOGNIZED;
  }
}

export function utxoTypeToJSON(object: UtxoType): string {
  switch (object) {
    case UtxoType.CONTRACT:
      return "CONTRACT";
    case UtxoType.COIN:
      return "COIN";
    case UtxoType.MESSAGE:
      return "MESSAGE";
    case UtxoType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Utxo {
  subject: string;
  blockHeight: number;
  txId: Uint8Array;
  txIndex: number;
  inputIndex: number;
  utxoType: UtxoType;
  utxoId: Uint8Array;
  value: Uint8Array;
  senderAddress: Uint8Array;
  recipientAddress: Uint8Array;
  nonce: Uint8Array;
  amount: number;
  data: Uint8Array;
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
  updatedAt: Date | undefined;
  pointer: UtxoPointer | undefined;
}

function createBaseUtxo(): Utxo {
  return {
    subject: "",
    blockHeight: 0,
    txId: new Uint8Array(0),
    txIndex: 0,
    inputIndex: 0,
    utxoType: 0,
    utxoId: new Uint8Array(0),
    value: new Uint8Array(0),
    senderAddress: new Uint8Array(0),
    recipientAddress: new Uint8Array(0),
    nonce: new Uint8Array(0),
    amount: 0,
    data: new Uint8Array(0),
    createdAt: undefined,
    publishedAt: undefined,
    updatedAt: undefined,
    pointer: undefined,
  };
}

export const Utxo: MessageFns<Utxo> = {
  encode(message: Utxo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.txId.length !== 0) {
      writer.uint32(26).bytes(message.txId);
    }
    if (message.txIndex !== 0) {
      writer.uint32(32).int32(message.txIndex);
    }
    if (message.inputIndex !== 0) {
      writer.uint32(40).int32(message.inputIndex);
    }
    if (message.utxoType !== 0) {
      writer.uint32(48).int32(message.utxoType);
    }
    if (message.utxoId.length !== 0) {
      writer.uint32(58).bytes(message.utxoId);
    }
    if (message.value.length !== 0) {
      writer.uint32(66).bytes(message.value);
    }
    if (message.senderAddress.length !== 0) {
      writer.uint32(74).bytes(message.senderAddress);
    }
    if (message.recipientAddress.length !== 0) {
      writer.uint32(82).bytes(message.recipientAddress);
    }
    if (message.nonce.length !== 0) {
      writer.uint32(90).bytes(message.nonce);
    }
    if (message.amount !== 0) {
      writer.uint32(96).int64(message.amount);
    }
    if (message.data.length !== 0) {
      writer.uint32(106).bytes(message.data);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(114).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(122).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(130).fork()).join();
    }
    if (message.pointer !== undefined) {
      UtxoPointer.encode(message.pointer, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Utxo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUtxo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.txIndex = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.inputIndex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.utxoType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.utxoId = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.senderAddress = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.recipientAddress = reader.bytes();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.nonce = reader.bytes();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.pointer = UtxoPointer.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Utxo {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      txId: isSet(object.txId) ? bytesFromBase64(object.txId) : new Uint8Array(0),
      txIndex: isSet(object.txIndex) ? globalThis.Number(object.txIndex) : 0,
      inputIndex: isSet(object.inputIndex) ? globalThis.Number(object.inputIndex) : 0,
      utxoType: isSet(object.utxoType) ? utxoTypeFromJSON(object.utxoType) : 0,
      utxoId: isSet(object.utxoId) ? bytesFromBase64(object.utxoId) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      senderAddress: isSet(object.senderAddress) ? bytesFromBase64(object.senderAddress) : new Uint8Array(0),
      recipientAddress: isSet(object.recipientAddress) ? bytesFromBase64(object.recipientAddress) : new Uint8Array(0),
      nonce: isSet(object.nonce) ? bytesFromBase64(object.nonce) : new Uint8Array(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      pointer: isSet(object.pointer) ? UtxoPointer.fromJSON(object.pointer) : undefined,
    };
  },

  toJSON(message: Utxo): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.txIndex !== 0) {
      obj.txIndex = Math.round(message.txIndex);
    }
    if (message.inputIndex !== 0) {
      obj.inputIndex = Math.round(message.inputIndex);
    }
    if (message.utxoType !== 0) {
      obj.utxoType = utxoTypeToJSON(message.utxoType);
    }
    if (message.utxoId.length !== 0) {
      obj.utxoId = base64FromBytes(message.utxoId);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.senderAddress.length !== 0) {
      obj.senderAddress = base64FromBytes(message.senderAddress);
    }
    if (message.recipientAddress.length !== 0) {
      obj.recipientAddress = base64FromBytes(message.recipientAddress);
    }
    if (message.nonce.length !== 0) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.pointer !== undefined) {
      obj.pointer = UtxoPointer.toJSON(message.pointer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Utxo>, I>>(base?: I): Utxo {
    return Utxo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Utxo>, I>>(object: I): Utxo {
    const message = createBaseUtxo();
    message.subject = object.subject ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.txId = object.txId ?? new Uint8Array(0);
    message.txIndex = object.txIndex ?? 0;
    message.inputIndex = object.inputIndex ?? 0;
    message.utxoType = object.utxoType ?? 0;
    message.utxoId = object.utxoId ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.senderAddress = object.senderAddress ?? new Uint8Array(0);
    message.recipientAddress = object.recipientAddress ?? new Uint8Array(0);
    message.nonce = object.nonce ?? new Uint8Array(0);
    message.amount = object.amount ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? UtxoPointer.fromPartial(object.pointer)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
