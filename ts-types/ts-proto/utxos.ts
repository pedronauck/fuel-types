// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: utxos.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "./common";
import { UtxoPointer } from "./pointers";

export const protobufPackage = "utxos";

export enum UtxoStatus {
  UNSPENT = 0,
  SPENT = 2,
  UNRECOGNIZED = -1,
}

export function utxoStatusFromJSON(object: any): UtxoStatus {
  switch (object) {
    case 0:
    case "UNSPENT":
      return UtxoStatus.UNSPENT;
    case 2:
    case "SPENT":
      return UtxoStatus.SPENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UtxoStatus.UNRECOGNIZED;
  }
}

export function utxoStatusToJSON(object: UtxoStatus): string {
  switch (object) {
    case UtxoStatus.UNSPENT:
      return "UNSPENT";
    case UtxoStatus.SPENT:
      return "SPENT";
    case UtxoStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UtxoType {
  UNKNOWN = 0,
  CONTRACT = 1,
  COIN = 2,
  MESSAGE = 3,
  UNRECOGNIZED = -1,
}

export function utxoTypeFromJSON(object: any): UtxoType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return UtxoType.UNKNOWN;
    case 1:
    case "CONTRACT":
      return UtxoType.CONTRACT;
    case 2:
    case "COIN":
      return UtxoType.COIN;
    case 3:
    case "MESSAGE":
      return UtxoType.MESSAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UtxoType.UNRECOGNIZED;
  }
}

export function utxoTypeToJSON(object: UtxoType): string {
  switch (object) {
    case UtxoType.UNKNOWN:
      return "UNKNOWN";
    case UtxoType.CONTRACT:
      return "CONTRACT";
    case UtxoType.COIN:
      return "COIN";
    case UtxoType.MESSAGE:
      return "MESSAGE";
    case UtxoType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Utxo {
  type: UtxoType;
  pointer: UtxoPointer | undefined;
  status: UtxoStatus;
  coin?: UtxoCoin | undefined;
  contract?: UtxoContract | undefined;
  message?: UtxoMessage | undefined;
  metadata: Metadata | undefined;
}

export interface UtxoCoin {
  amount: number;
}

export interface UtxoContract {
  contractId: Uint8Array;
  value: Uint8Array;
}

export interface UtxoMessage {
  sender: Uint8Array;
  recipient: Uint8Array;
  nonce: Uint8Array;
  data: Uint8Array;
}

function createBaseUtxo(): Utxo {
  return {
    type: 0,
    pointer: undefined,
    status: 0,
    coin: undefined,
    contract: undefined,
    message: undefined,
    metadata: undefined,
  };
}

export const Utxo: MessageFns<Utxo> = {
  encode(message: Utxo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pointer !== undefined) {
      UtxoPointer.encode(message.pointer, writer.uint32(18).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.coin !== undefined) {
      UtxoCoin.encode(message.coin, writer.uint32(34).fork()).join();
    }
    if (message.contract !== undefined) {
      UtxoContract.encode(message.contract, writer.uint32(42).fork()).join();
    }
    if (message.message !== undefined) {
      UtxoMessage.encode(message.message, writer.uint32(50).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Utxo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUtxo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pointer = UtxoPointer.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coin = UtxoCoin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contract = UtxoContract.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = UtxoMessage.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Utxo {
    return {
      type: isSet(object.type) ? utxoTypeFromJSON(object.type) : 0,
      pointer: isSet(object.pointer) ? UtxoPointer.fromJSON(object.pointer) : undefined,
      status: isSet(object.status) ? utxoStatusFromJSON(object.status) : 0,
      coin: isSet(object.coin) ? UtxoCoin.fromJSON(object.coin) : undefined,
      contract: isSet(object.contract) ? UtxoContract.fromJSON(object.contract) : undefined,
      message: isSet(object.message) ? UtxoMessage.fromJSON(object.message) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Utxo): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = utxoTypeToJSON(message.type);
    }
    if (message.pointer !== undefined) {
      obj.pointer = UtxoPointer.toJSON(message.pointer);
    }
    if (message.status !== 0) {
      obj.status = utxoStatusToJSON(message.status);
    }
    if (message.coin !== undefined) {
      obj.coin = UtxoCoin.toJSON(message.coin);
    }
    if (message.contract !== undefined) {
      obj.contract = UtxoContract.toJSON(message.contract);
    }
    if (message.message !== undefined) {
      obj.message = UtxoMessage.toJSON(message.message);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Utxo>, I>>(base?: I): Utxo {
    return Utxo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Utxo>, I>>(object: I): Utxo {
    const message = createBaseUtxo();
    message.type = object.type ?? 0;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? UtxoPointer.fromPartial(object.pointer)
      : undefined;
    message.status = object.status ?? 0;
    message.coin = (object.coin !== undefined && object.coin !== null) ? UtxoCoin.fromPartial(object.coin) : undefined;
    message.contract = (object.contract !== undefined && object.contract !== null)
      ? UtxoContract.fromPartial(object.contract)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? UtxoMessage.fromPartial(object.message)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseUtxoCoin(): UtxoCoin {
  return { amount: 0 };
}

export const UtxoCoin: MessageFns<UtxoCoin> = {
  encode(message: UtxoCoin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(8).int64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UtxoCoin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUtxoCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UtxoCoin {
    return { amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0 };
  },

  toJSON(message: UtxoCoin): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UtxoCoin>, I>>(base?: I): UtxoCoin {
    return UtxoCoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UtxoCoin>, I>>(object: I): UtxoCoin {
    const message = createBaseUtxoCoin();
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseUtxoContract(): UtxoContract {
  return { contractId: new Uint8Array(0), value: new Uint8Array(0) };
}

export const UtxoContract: MessageFns<UtxoContract> = {
  encode(message: UtxoContract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contractId.length !== 0) {
      writer.uint32(10).bytes(message.contractId);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UtxoContract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUtxoContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contractId = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UtxoContract {
    return {
      contractId: isSet(object.contractId) ? bytesFromBase64(object.contractId) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: UtxoContract): unknown {
    const obj: any = {};
    if (message.contractId.length !== 0) {
      obj.contractId = base64FromBytes(message.contractId);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UtxoContract>, I>>(base?: I): UtxoContract {
    return UtxoContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UtxoContract>, I>>(object: I): UtxoContract {
    const message = createBaseUtxoContract();
    message.contractId = object.contractId ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseUtxoMessage(): UtxoMessage {
  return { sender: new Uint8Array(0), recipient: new Uint8Array(0), nonce: new Uint8Array(0), data: new Uint8Array(0) };
}

export const UtxoMessage: MessageFns<UtxoMessage> = {
  encode(message: UtxoMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender.length !== 0) {
      writer.uint32(10).bytes(message.sender);
    }
    if (message.recipient.length !== 0) {
      writer.uint32(18).bytes(message.recipient);
    }
    if (message.nonce.length !== 0) {
      writer.uint32(26).bytes(message.nonce);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UtxoMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUtxoMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recipient = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nonce = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UtxoMessage {
    return {
      sender: isSet(object.sender) ? bytesFromBase64(object.sender) : new Uint8Array(0),
      recipient: isSet(object.recipient) ? bytesFromBase64(object.recipient) : new Uint8Array(0),
      nonce: isSet(object.nonce) ? bytesFromBase64(object.nonce) : new Uint8Array(0),
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: UtxoMessage): unknown {
    const obj: any = {};
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    if (message.recipient.length !== 0) {
      obj.recipient = base64FromBytes(message.recipient);
    }
    if (message.nonce.length !== 0) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UtxoMessage>, I>>(base?: I): UtxoMessage {
    return UtxoMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UtxoMessage>, I>>(object: I): UtxoMessage {
    const message = createBaseUtxoMessage();
    message.sender = object.sender ?? new Uint8Array(0);
    message.recipient = object.recipient ?? new Uint8Array(0);
    message.nonce = object.nonce ?? new Uint8Array(0);
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
