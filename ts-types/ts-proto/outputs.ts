// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: outputs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "./common";
import { OutputPointer } from "./pointers";

export const protobufPackage = "outputs";

export enum OutputType {
  UNKNOWN_OUTPUT_TYPE = 0,
  COIN = 1,
  CONTRACT = 2,
  CHANGE = 3,
  VARIABLE = 4,
  CONTRACT_CREATED = 5,
  UNRECOGNIZED = -1,
}

export function outputTypeFromJSON(object: any): OutputType {
  switch (object) {
    case 0:
    case "UNKNOWN_OUTPUT_TYPE":
      return OutputType.UNKNOWN_OUTPUT_TYPE;
    case 1:
    case "COIN":
      return OutputType.COIN;
    case 2:
    case "CONTRACT":
      return OutputType.CONTRACT;
    case 3:
    case "CHANGE":
      return OutputType.CHANGE;
    case 4:
    case "VARIABLE":
      return OutputType.VARIABLE;
    case 5:
    case "CONTRACT_CREATED":
      return OutputType.CONTRACT_CREATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OutputType.UNRECOGNIZED;
  }
}

export function outputTypeToJSON(object: OutputType): string {
  switch (object) {
    case OutputType.UNKNOWN_OUTPUT_TYPE:
      return "UNKNOWN_OUTPUT_TYPE";
    case OutputType.COIN:
      return "COIN";
    case OutputType.CONTRACT:
      return "CONTRACT";
    case OutputType.CHANGE:
      return "CHANGE";
    case OutputType.VARIABLE:
      return "VARIABLE";
    case OutputType.CONTRACT_CREATED:
      return "CONTRACT_CREATED";
    case OutputType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Output {
  type: OutputType;
  pointer: OutputPointer | undefined;
  coin?: OutputCoin | undefined;
  contract?: OutputContract | undefined;
  change?: OutputChange | undefined;
  variable?: OutputVariable | undefined;
  contractCreated?:
    | OutputContractCreated
    | undefined;
  /** Metadata */
  metadata: Metadata | undefined;
}

export interface OutputCoin {
  to: string;
  amount: number;
  assetId: string;
}

export interface OutputContract {
  balanceRoot: string;
  stateRoot: string;
  inputIndex: number;
}

export interface OutputContractCreated {
  contractId: string;
  stateRoot: string;
}

export interface OutputChange {
  to: string;
  amount: number;
  assetId: string;
}

export interface OutputVariable {
  to: string;
  amount: number;
  assetId: string;
}

function createBaseOutput(): Output {
  return {
    type: 0,
    pointer: undefined,
    coin: undefined,
    contract: undefined,
    change: undefined,
    variable: undefined,
    contractCreated: undefined,
    metadata: undefined,
  };
}

export const Output: MessageFns<Output> = {
  encode(message: Output, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pointer !== undefined) {
      OutputPointer.encode(message.pointer, writer.uint32(18).fork()).join();
    }
    if (message.coin !== undefined) {
      OutputCoin.encode(message.coin, writer.uint32(26).fork()).join();
    }
    if (message.contract !== undefined) {
      OutputContract.encode(message.contract, writer.uint32(34).fork()).join();
    }
    if (message.change !== undefined) {
      OutputChange.encode(message.change, writer.uint32(42).fork()).join();
    }
    if (message.variable !== undefined) {
      OutputVariable.encode(message.variable, writer.uint32(50).fork()).join();
    }
    if (message.contractCreated !== undefined) {
      OutputContractCreated.encode(message.contractCreated, writer.uint32(58).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Output {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pointer = OutputPointer.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.coin = OutputCoin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contract = OutputContract.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.change = OutputChange.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.variable = OutputVariable.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contractCreated = OutputContractCreated.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Output {
    return {
      type: isSet(object.type) ? outputTypeFromJSON(object.type) : 0,
      pointer: isSet(object.pointer) ? OutputPointer.fromJSON(object.pointer) : undefined,
      coin: isSet(object.coin) ? OutputCoin.fromJSON(object.coin) : undefined,
      contract: isSet(object.contract) ? OutputContract.fromJSON(object.contract) : undefined,
      change: isSet(object.change) ? OutputChange.fromJSON(object.change) : undefined,
      variable: isSet(object.variable) ? OutputVariable.fromJSON(object.variable) : undefined,
      contractCreated: isSet(object.contractCreated)
        ? OutputContractCreated.fromJSON(object.contractCreated)
        : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Output): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = outputTypeToJSON(message.type);
    }
    if (message.pointer !== undefined) {
      obj.pointer = OutputPointer.toJSON(message.pointer);
    }
    if (message.coin !== undefined) {
      obj.coin = OutputCoin.toJSON(message.coin);
    }
    if (message.contract !== undefined) {
      obj.contract = OutputContract.toJSON(message.contract);
    }
    if (message.change !== undefined) {
      obj.change = OutputChange.toJSON(message.change);
    }
    if (message.variable !== undefined) {
      obj.variable = OutputVariable.toJSON(message.variable);
    }
    if (message.contractCreated !== undefined) {
      obj.contractCreated = OutputContractCreated.toJSON(message.contractCreated);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Output>, I>>(base?: I): Output {
    return Output.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Output>, I>>(object: I): Output {
    const message = createBaseOutput();
    message.type = object.type ?? 0;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? OutputPointer.fromPartial(object.pointer)
      : undefined;
    message.coin = (object.coin !== undefined && object.coin !== null)
      ? OutputCoin.fromPartial(object.coin)
      : undefined;
    message.contract = (object.contract !== undefined && object.contract !== null)
      ? OutputContract.fromPartial(object.contract)
      : undefined;
    message.change = (object.change !== undefined && object.change !== null)
      ? OutputChange.fromPartial(object.change)
      : undefined;
    message.variable = (object.variable !== undefined && object.variable !== null)
      ? OutputVariable.fromPartial(object.variable)
      : undefined;
    message.contractCreated = (object.contractCreated !== undefined && object.contractCreated !== null)
      ? OutputContractCreated.fromPartial(object.contractCreated)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseOutputCoin(): OutputCoin {
  return { to: "", amount: 0, assetId: "" };
}

export const OutputCoin: MessageFns<OutputCoin> = {
  encode(message: OutputCoin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int64(message.amount);
    }
    if (message.assetId !== "") {
      writer.uint32(26).string(message.assetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputCoin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assetId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputCoin {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      assetId: isSet(object.assetId) ? globalThis.String(object.assetId) : "",
    };
  },

  toJSON(message: OutputCoin): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.assetId !== "") {
      obj.assetId = message.assetId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputCoin>, I>>(base?: I): OutputCoin {
    return OutputCoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputCoin>, I>>(object: I): OutputCoin {
    const message = createBaseOutputCoin();
    message.to = object.to ?? "";
    message.amount = object.amount ?? 0;
    message.assetId = object.assetId ?? "";
    return message;
  },
};

function createBaseOutputContract(): OutputContract {
  return { balanceRoot: "", stateRoot: "", inputIndex: 0 };
}

export const OutputContract: MessageFns<OutputContract> = {
  encode(message: OutputContract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.balanceRoot !== "") {
      writer.uint32(10).string(message.balanceRoot);
    }
    if (message.stateRoot !== "") {
      writer.uint32(18).string(message.stateRoot);
    }
    if (message.inputIndex !== 0) {
      writer.uint32(24).int32(message.inputIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputContract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.balanceRoot = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stateRoot = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.inputIndex = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputContract {
    return {
      balanceRoot: isSet(object.balanceRoot) ? globalThis.String(object.balanceRoot) : "",
      stateRoot: isSet(object.stateRoot) ? globalThis.String(object.stateRoot) : "",
      inputIndex: isSet(object.inputIndex) ? globalThis.Number(object.inputIndex) : 0,
    };
  },

  toJSON(message: OutputContract): unknown {
    const obj: any = {};
    if (message.balanceRoot !== "") {
      obj.balanceRoot = message.balanceRoot;
    }
    if (message.stateRoot !== "") {
      obj.stateRoot = message.stateRoot;
    }
    if (message.inputIndex !== 0) {
      obj.inputIndex = Math.round(message.inputIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputContract>, I>>(base?: I): OutputContract {
    return OutputContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputContract>, I>>(object: I): OutputContract {
    const message = createBaseOutputContract();
    message.balanceRoot = object.balanceRoot ?? "";
    message.stateRoot = object.stateRoot ?? "";
    message.inputIndex = object.inputIndex ?? 0;
    return message;
  },
};

function createBaseOutputContractCreated(): OutputContractCreated {
  return { contractId: "", stateRoot: "" };
}

export const OutputContractCreated: MessageFns<OutputContractCreated> = {
  encode(message: OutputContractCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contractId !== "") {
      writer.uint32(10).string(message.contractId);
    }
    if (message.stateRoot !== "") {
      writer.uint32(18).string(message.stateRoot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputContractCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputContractCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stateRoot = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputContractCreated {
    return {
      contractId: isSet(object.contractId) ? globalThis.String(object.contractId) : "",
      stateRoot: isSet(object.stateRoot) ? globalThis.String(object.stateRoot) : "",
    };
  },

  toJSON(message: OutputContractCreated): unknown {
    const obj: any = {};
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.stateRoot !== "") {
      obj.stateRoot = message.stateRoot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputContractCreated>, I>>(base?: I): OutputContractCreated {
    return OutputContractCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputContractCreated>, I>>(object: I): OutputContractCreated {
    const message = createBaseOutputContractCreated();
    message.contractId = object.contractId ?? "";
    message.stateRoot = object.stateRoot ?? "";
    return message;
  },
};

function createBaseOutputChange(): OutputChange {
  return { to: "", amount: 0, assetId: "" };
}

export const OutputChange: MessageFns<OutputChange> = {
  encode(message: OutputChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int64(message.amount);
    }
    if (message.assetId !== "") {
      writer.uint32(26).string(message.assetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assetId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputChange {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      assetId: isSet(object.assetId) ? globalThis.String(object.assetId) : "",
    };
  },

  toJSON(message: OutputChange): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.assetId !== "") {
      obj.assetId = message.assetId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputChange>, I>>(base?: I): OutputChange {
    return OutputChange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputChange>, I>>(object: I): OutputChange {
    const message = createBaseOutputChange();
    message.to = object.to ?? "";
    message.amount = object.amount ?? 0;
    message.assetId = object.assetId ?? "";
    return message;
  },
};

function createBaseOutputVariable(): OutputVariable {
  return { to: "", amount: 0, assetId: "" };
}

export const OutputVariable: MessageFns<OutputVariable> = {
  encode(message: OutputVariable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int64(message.amount);
    }
    if (message.assetId !== "") {
      writer.uint32(26).string(message.assetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputVariable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputVariable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assetId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputVariable {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      assetId: isSet(object.assetId) ? globalThis.String(object.assetId) : "",
    };
  },

  toJSON(message: OutputVariable): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.assetId !== "") {
      obj.assetId = message.assetId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputVariable>, I>>(base?: I): OutputVariable {
    return OutputVariable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputVariable>, I>>(object: I): OutputVariable {
    const message = createBaseOutputVariable();
    message.to = object.to ?? "";
    message.amount = object.amount ?? 0;
    message.assetId = object.assetId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
