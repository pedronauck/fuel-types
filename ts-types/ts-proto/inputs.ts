// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: inputs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "./common";
import { InputPointer } from "./pointers";

export const protobufPackage = "inputs";

export enum InputType {
  UNKNOWN_INPUT_TYPE = 0,
  CONTRACT = 1,
  COIN = 2,
  MESSAGE = 3,
  UNRECOGNIZED = -1,
}

export function inputTypeFromJSON(object: any): InputType {
  switch (object) {
    case 0:
    case "UNKNOWN_INPUT_TYPE":
      return InputType.UNKNOWN_INPUT_TYPE;
    case 1:
    case "CONTRACT":
      return InputType.CONTRACT;
    case 2:
    case "COIN":
      return InputType.COIN;
    case 3:
    case "MESSAGE":
      return InputType.MESSAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InputType.UNRECOGNIZED;
  }
}

export function inputTypeToJSON(object: InputType): string {
  switch (object) {
    case InputType.UNKNOWN_INPUT_TYPE:
      return "UNKNOWN_INPUT_TYPE";
    case InputType.CONTRACT:
      return "CONTRACT";
    case InputType.COIN:
      return "COIN";
    case InputType.MESSAGE:
      return "MESSAGE";
    case InputType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Input {
  type: InputType;
  pointer: InputPointer | undefined;
  coin?: InputCoin | undefined;
  contract?: InputContract | undefined;
  message?:
    | InputMessage
    | undefined;
  /** Metadata */
  metadata: Metadata | undefined;
}

export interface InputCoin {
  /** Fields matching fuel-core */
  utxoId: string;
  owner: string;
  amount: number;
  assetId: string;
  witnessIndex: number;
  predicateGasUsed: number;
  predicate: string;
  predicateData: string;
  /** Extra fields (not in fuel-core) */
  predicateLength: number;
  predicateDataLength: number;
  outputIndex: number;
}

export interface InputContract {
  /** Fields matching fuel-core */
  utxoId: string;
  balanceRoot: string;
  stateRoot: string;
  contractId: string;
  /** Extra fields (not in fuel-core) */
  outputIndex: number;
}

export interface InputMessage {
  /** Fields matching fuel-core */
  sender: string;
  recipient: string;
  amount: number;
  nonce: string;
  witnessIndex: number;
  predicateGasUsed: number;
  data: string;
  predicate: string;
  predicateData: string;
  /** Extra fields (not in fuel-core) */
  dataLength: number;
  predicateLength: number;
  predicateDataLength: number;
}

function createBaseInput(): Input {
  return { type: 0, pointer: undefined, coin: undefined, contract: undefined, message: undefined, metadata: undefined };
}

export const Input: MessageFns<Input> = {
  encode(message: Input, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pointer !== undefined) {
      InputPointer.encode(message.pointer, writer.uint32(18).fork()).join();
    }
    if (message.coin !== undefined) {
      InputCoin.encode(message.coin, writer.uint32(26).fork()).join();
    }
    if (message.contract !== undefined) {
      InputContract.encode(message.contract, writer.uint32(34).fork()).join();
    }
    if (message.message !== undefined) {
      InputMessage.encode(message.message, writer.uint32(42).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Input {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pointer = InputPointer.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.coin = InputCoin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contract = InputContract.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.message = InputMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Input {
    return {
      type: isSet(object.type) ? inputTypeFromJSON(object.type) : 0,
      pointer: isSet(object.pointer) ? InputPointer.fromJSON(object.pointer) : undefined,
      coin: isSet(object.coin) ? InputCoin.fromJSON(object.coin) : undefined,
      contract: isSet(object.contract) ? InputContract.fromJSON(object.contract) : undefined,
      message: isSet(object.message) ? InputMessage.fromJSON(object.message) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Input): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = inputTypeToJSON(message.type);
    }
    if (message.pointer !== undefined) {
      obj.pointer = InputPointer.toJSON(message.pointer);
    }
    if (message.coin !== undefined) {
      obj.coin = InputCoin.toJSON(message.coin);
    }
    if (message.contract !== undefined) {
      obj.contract = InputContract.toJSON(message.contract);
    }
    if (message.message !== undefined) {
      obj.message = InputMessage.toJSON(message.message);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Input>, I>>(base?: I): Input {
    return Input.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Input>, I>>(object: I): Input {
    const message = createBaseInput();
    message.type = object.type ?? 0;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? InputPointer.fromPartial(object.pointer)
      : undefined;
    message.coin = (object.coin !== undefined && object.coin !== null) ? InputCoin.fromPartial(object.coin) : undefined;
    message.contract = (object.contract !== undefined && object.contract !== null)
      ? InputContract.fromPartial(object.contract)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? InputMessage.fromPartial(object.message)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseInputCoin(): InputCoin {
  return {
    utxoId: "",
    owner: "",
    amount: 0,
    assetId: "",
    witnessIndex: 0,
    predicateGasUsed: 0,
    predicate: "",
    predicateData: "",
    predicateLength: 0,
    predicateDataLength: 0,
    outputIndex: 0,
  };
}

export const InputCoin: MessageFns<InputCoin> = {
  encode(message: InputCoin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.utxoId !== "") {
      writer.uint32(10).string(message.utxoId);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int64(message.amount);
    }
    if (message.assetId !== "") {
      writer.uint32(34).string(message.assetId);
    }
    if (message.witnessIndex !== 0) {
      writer.uint32(40).int32(message.witnessIndex);
    }
    if (message.predicateGasUsed !== 0) {
      writer.uint32(48).int64(message.predicateGasUsed);
    }
    if (message.predicate !== "") {
      writer.uint32(58).string(message.predicate);
    }
    if (message.predicateData !== "") {
      writer.uint32(66).string(message.predicateData);
    }
    if (message.predicateLength !== 0) {
      writer.uint32(72).int64(message.predicateLength);
    }
    if (message.predicateDataLength !== 0) {
      writer.uint32(80).int64(message.predicateDataLength);
    }
    if (message.outputIndex !== 0) {
      writer.uint32(88).int32(message.outputIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputCoin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.utxoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.assetId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.witnessIndex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.predicateGasUsed = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.predicate = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.predicateData = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.predicateLength = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.predicateDataLength = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.outputIndex = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputCoin {
    return {
      utxoId: isSet(object.utxoId) ? globalThis.String(object.utxoId) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      assetId: isSet(object.assetId) ? globalThis.String(object.assetId) : "",
      witnessIndex: isSet(object.witnessIndex) ? globalThis.Number(object.witnessIndex) : 0,
      predicateGasUsed: isSet(object.predicateGasUsed) ? globalThis.Number(object.predicateGasUsed) : 0,
      predicate: isSet(object.predicate) ? globalThis.String(object.predicate) : "",
      predicateData: isSet(object.predicateData) ? globalThis.String(object.predicateData) : "",
      predicateLength: isSet(object.predicateLength) ? globalThis.Number(object.predicateLength) : 0,
      predicateDataLength: isSet(object.predicateDataLength) ? globalThis.Number(object.predicateDataLength) : 0,
      outputIndex: isSet(object.outputIndex) ? globalThis.Number(object.outputIndex) : 0,
    };
  },

  toJSON(message: InputCoin): unknown {
    const obj: any = {};
    if (message.utxoId !== "") {
      obj.utxoId = message.utxoId;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.assetId !== "") {
      obj.assetId = message.assetId;
    }
    if (message.witnessIndex !== 0) {
      obj.witnessIndex = Math.round(message.witnessIndex);
    }
    if (message.predicateGasUsed !== 0) {
      obj.predicateGasUsed = Math.round(message.predicateGasUsed);
    }
    if (message.predicate !== "") {
      obj.predicate = message.predicate;
    }
    if (message.predicateData !== "") {
      obj.predicateData = message.predicateData;
    }
    if (message.predicateLength !== 0) {
      obj.predicateLength = Math.round(message.predicateLength);
    }
    if (message.predicateDataLength !== 0) {
      obj.predicateDataLength = Math.round(message.predicateDataLength);
    }
    if (message.outputIndex !== 0) {
      obj.outputIndex = Math.round(message.outputIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputCoin>, I>>(base?: I): InputCoin {
    return InputCoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputCoin>, I>>(object: I): InputCoin {
    const message = createBaseInputCoin();
    message.utxoId = object.utxoId ?? "";
    message.owner = object.owner ?? "";
    message.amount = object.amount ?? 0;
    message.assetId = object.assetId ?? "";
    message.witnessIndex = object.witnessIndex ?? 0;
    message.predicateGasUsed = object.predicateGasUsed ?? 0;
    message.predicate = object.predicate ?? "";
    message.predicateData = object.predicateData ?? "";
    message.predicateLength = object.predicateLength ?? 0;
    message.predicateDataLength = object.predicateDataLength ?? 0;
    message.outputIndex = object.outputIndex ?? 0;
    return message;
  },
};

function createBaseInputContract(): InputContract {
  return { utxoId: "", balanceRoot: "", stateRoot: "", contractId: "", outputIndex: 0 };
}

export const InputContract: MessageFns<InputContract> = {
  encode(message: InputContract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.utxoId !== "") {
      writer.uint32(10).string(message.utxoId);
    }
    if (message.balanceRoot !== "") {
      writer.uint32(18).string(message.balanceRoot);
    }
    if (message.stateRoot !== "") {
      writer.uint32(26).string(message.stateRoot);
    }
    if (message.contractId !== "") {
      writer.uint32(34).string(message.contractId);
    }
    if (message.outputIndex !== 0) {
      writer.uint32(40).int32(message.outputIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputContract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.utxoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.balanceRoot = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stateRoot = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.outputIndex = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputContract {
    return {
      utxoId: isSet(object.utxoId) ? globalThis.String(object.utxoId) : "",
      balanceRoot: isSet(object.balanceRoot) ? globalThis.String(object.balanceRoot) : "",
      stateRoot: isSet(object.stateRoot) ? globalThis.String(object.stateRoot) : "",
      contractId: isSet(object.contractId) ? globalThis.String(object.contractId) : "",
      outputIndex: isSet(object.outputIndex) ? globalThis.Number(object.outputIndex) : 0,
    };
  },

  toJSON(message: InputContract): unknown {
    const obj: any = {};
    if (message.utxoId !== "") {
      obj.utxoId = message.utxoId;
    }
    if (message.balanceRoot !== "") {
      obj.balanceRoot = message.balanceRoot;
    }
    if (message.stateRoot !== "") {
      obj.stateRoot = message.stateRoot;
    }
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.outputIndex !== 0) {
      obj.outputIndex = Math.round(message.outputIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputContract>, I>>(base?: I): InputContract {
    return InputContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputContract>, I>>(object: I): InputContract {
    const message = createBaseInputContract();
    message.utxoId = object.utxoId ?? "";
    message.balanceRoot = object.balanceRoot ?? "";
    message.stateRoot = object.stateRoot ?? "";
    message.contractId = object.contractId ?? "";
    message.outputIndex = object.outputIndex ?? 0;
    return message;
  },
};

function createBaseInputMessage(): InputMessage {
  return {
    sender: "",
    recipient: "",
    amount: 0,
    nonce: "",
    witnessIndex: 0,
    predicateGasUsed: 0,
    data: "",
    predicate: "",
    predicateData: "",
    dataLength: 0,
    predicateLength: 0,
    predicateDataLength: 0,
  };
}

export const InputMessage: MessageFns<InputMessage> = {
  encode(message: InputMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.recipient !== "") {
      writer.uint32(18).string(message.recipient);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int64(message.amount);
    }
    if (message.nonce !== "") {
      writer.uint32(34).string(message.nonce);
    }
    if (message.witnessIndex !== 0) {
      writer.uint32(40).int32(message.witnessIndex);
    }
    if (message.predicateGasUsed !== 0) {
      writer.uint32(48).int64(message.predicateGasUsed);
    }
    if (message.data !== "") {
      writer.uint32(58).string(message.data);
    }
    if (message.predicate !== "") {
      writer.uint32(66).string(message.predicate);
    }
    if (message.predicateData !== "") {
      writer.uint32(74).string(message.predicateData);
    }
    if (message.dataLength !== 0) {
      writer.uint32(80).int32(message.dataLength);
    }
    if (message.predicateLength !== 0) {
      writer.uint32(88).int32(message.predicateLength);
    }
    if (message.predicateDataLength !== 0) {
      writer.uint32(96).int32(message.predicateDataLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.witnessIndex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.predicateGasUsed = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.predicate = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.predicateData = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.dataLength = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.predicateLength = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.predicateDataLength = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputMessage {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
      witnessIndex: isSet(object.witnessIndex) ? globalThis.Number(object.witnessIndex) : 0,
      predicateGasUsed: isSet(object.predicateGasUsed) ? globalThis.Number(object.predicateGasUsed) : 0,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      predicate: isSet(object.predicate) ? globalThis.String(object.predicate) : "",
      predicateData: isSet(object.predicateData) ? globalThis.String(object.predicateData) : "",
      dataLength: isSet(object.dataLength) ? globalThis.Number(object.dataLength) : 0,
      predicateLength: isSet(object.predicateLength) ? globalThis.Number(object.predicateLength) : 0,
      predicateDataLength: isSet(object.predicateDataLength) ? globalThis.Number(object.predicateDataLength) : 0,
    };
  },

  toJSON(message: InputMessage): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.witnessIndex !== 0) {
      obj.witnessIndex = Math.round(message.witnessIndex);
    }
    if (message.predicateGasUsed !== 0) {
      obj.predicateGasUsed = Math.round(message.predicateGasUsed);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.predicate !== "") {
      obj.predicate = message.predicate;
    }
    if (message.predicateData !== "") {
      obj.predicateData = message.predicateData;
    }
    if (message.dataLength !== 0) {
      obj.dataLength = Math.round(message.dataLength);
    }
    if (message.predicateLength !== 0) {
      obj.predicateLength = Math.round(message.predicateLength);
    }
    if (message.predicateDataLength !== 0) {
      obj.predicateDataLength = Math.round(message.predicateDataLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputMessage>, I>>(base?: I): InputMessage {
    return InputMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputMessage>, I>>(object: I): InputMessage {
    const message = createBaseInputMessage();
    message.sender = object.sender ?? "";
    message.recipient = object.recipient ?? "";
    message.amount = object.amount ?? 0;
    message.nonce = object.nonce ?? "";
    message.witnessIndex = object.witnessIndex ?? 0;
    message.predicateGasUsed = object.predicateGasUsed ?? 0;
    message.data = object.data ?? "";
    message.predicate = object.predicate ?? "";
    message.predicateData = object.predicateData ?? "";
    message.dataLength = object.dataLength ?? 0;
    message.predicateLength = object.predicateLength ?? 0;
    message.predicateDataLength = object.predicateDataLength ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
