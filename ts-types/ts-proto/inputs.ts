// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: inputs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { InputPointer } from "./pointers";

export const protobufPackage = "inputs";

export enum InputType {
  CONTRACT = 0,
  COIN = 1,
  MESSAGE = 2,
  UNRECOGNIZED = -1,
}

export function inputTypeFromJSON(object: any): InputType {
  switch (object) {
    case 0:
    case "CONTRACT":
      return InputType.CONTRACT;
    case 1:
    case "COIN":
      return InputType.COIN;
    case 2:
    case "MESSAGE":
      return InputType.MESSAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InputType.UNRECOGNIZED;
  }
}

export function inputTypeToJSON(object: InputType): string {
  switch (object) {
    case InputType.CONTRACT:
      return "CONTRACT";
    case InputType.COIN:
      return "COIN";
    case InputType.MESSAGE:
      return "MESSAGE";
    case InputType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Input {
  subject: string;
  blockHeight: number;
  txId: Uint8Array;
  txIndex: number;
  inputIndex: number;
  inputType: InputType;
  coin?: InputCoin | undefined;
  contract?: InputContract | undefined;
  message?:
    | InputMessage
    | undefined;
  /** Metadata */
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
  pointer: InputPointer | undefined;
}

export interface InputCoin {
  subject: string;
  txId: Uint8Array;
  amount: number;
  assetId: Uint8Array;
  ownerAddress: Uint8Array;
  outputIndex: number;
  predicate: Uint8Array;
  predicateData: Uint8Array;
  predicateGasUsed: number;
  predicateLength: number;
  predicateDataLength: number;
  txPointerBlockHeight: number;
  txPointerTxIndex: number;
  utxoId: Uint8Array;
  witnessIndex: number;
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
}

export interface InputContract {
  subject: string;
  txId: Uint8Array;
  balanceRoot: Uint8Array;
  contractId: Uint8Array;
  outputIndex: number;
  stateRoot: Uint8Array;
  txPointerBlockHeight: number;
  txPointerTxIndex: number;
  utxoId: Uint8Array;
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
}

export interface InputMessage {
  subject: string;
  txId: Uint8Array;
  amount: number;
  data: Uint8Array;
  dataLength: number;
  nonce: Uint8Array;
  predicate: Uint8Array;
  predicateLength: number;
  predicateData: Uint8Array;
  predicateDataLength: number;
  predicateGasUsed: number;
  recipientAddress: Uint8Array;
  senderAddress: Uint8Array;
  witnessIndex: number;
  createdAt: Date | undefined;
  publishedAt: Date | undefined;
}

function createBaseInput(): Input {
  return {
    subject: "",
    blockHeight: 0,
    txId: new Uint8Array(0),
    txIndex: 0,
    inputIndex: 0,
    inputType: 0,
    coin: undefined,
    contract: undefined,
    message: undefined,
    createdAt: undefined,
    publishedAt: undefined,
    pointer: undefined,
  };
}

export const Input: MessageFns<Input> = {
  encode(message: Input, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.txId.length !== 0) {
      writer.uint32(26).bytes(message.txId);
    }
    if (message.txIndex !== 0) {
      writer.uint32(32).int32(message.txIndex);
    }
    if (message.inputIndex !== 0) {
      writer.uint32(40).int32(message.inputIndex);
    }
    if (message.inputType !== 0) {
      writer.uint32(48).int32(message.inputType);
    }
    if (message.coin !== undefined) {
      InputCoin.encode(message.coin, writer.uint32(58).fork()).join();
    }
    if (message.contract !== undefined) {
      InputContract.encode(message.contract, writer.uint32(66).fork()).join();
    }
    if (message.message !== undefined) {
      InputMessage.encode(message.message, writer.uint32(74).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(90).fork()).join();
    }
    if (message.pointer !== undefined) {
      InputPointer.encode(message.pointer, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Input {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.txIndex = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.inputIndex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.inputType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.coin = InputCoin.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.contract = InputContract.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.message = InputMessage.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.pointer = InputPointer.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Input {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      txId: isSet(object.txId) ? bytesFromBase64(object.txId) : new Uint8Array(0),
      txIndex: isSet(object.txIndex) ? globalThis.Number(object.txIndex) : 0,
      inputIndex: isSet(object.inputIndex) ? globalThis.Number(object.inputIndex) : 0,
      inputType: isSet(object.inputType) ? inputTypeFromJSON(object.inputType) : 0,
      coin: isSet(object.coin) ? InputCoin.fromJSON(object.coin) : undefined,
      contract: isSet(object.contract) ? InputContract.fromJSON(object.contract) : undefined,
      message: isSet(object.message) ? InputMessage.fromJSON(object.message) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
      pointer: isSet(object.pointer) ? InputPointer.fromJSON(object.pointer) : undefined,
    };
  },

  toJSON(message: Input): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.txIndex !== 0) {
      obj.txIndex = Math.round(message.txIndex);
    }
    if (message.inputIndex !== 0) {
      obj.inputIndex = Math.round(message.inputIndex);
    }
    if (message.inputType !== 0) {
      obj.inputType = inputTypeToJSON(message.inputType);
    }
    if (message.coin !== undefined) {
      obj.coin = InputCoin.toJSON(message.coin);
    }
    if (message.contract !== undefined) {
      obj.contract = InputContract.toJSON(message.contract);
    }
    if (message.message !== undefined) {
      obj.message = InputMessage.toJSON(message.message);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    if (message.pointer !== undefined) {
      obj.pointer = InputPointer.toJSON(message.pointer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Input>, I>>(base?: I): Input {
    return Input.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Input>, I>>(object: I): Input {
    const message = createBaseInput();
    message.subject = object.subject ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.txId = object.txId ?? new Uint8Array(0);
    message.txIndex = object.txIndex ?? 0;
    message.inputIndex = object.inputIndex ?? 0;
    message.inputType = object.inputType ?? 0;
    message.coin = (object.coin !== undefined && object.coin !== null) ? InputCoin.fromPartial(object.coin) : undefined;
    message.contract = (object.contract !== undefined && object.contract !== null)
      ? InputContract.fromPartial(object.contract)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? InputMessage.fromPartial(object.message)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    message.pointer = (object.pointer !== undefined && object.pointer !== null)
      ? InputPointer.fromPartial(object.pointer)
      : undefined;
    return message;
  },
};

function createBaseInputCoin(): InputCoin {
  return {
    subject: "",
    txId: new Uint8Array(0),
    amount: 0,
    assetId: new Uint8Array(0),
    ownerAddress: new Uint8Array(0),
    outputIndex: 0,
    predicate: new Uint8Array(0),
    predicateData: new Uint8Array(0),
    predicateGasUsed: 0,
    predicateLength: 0,
    predicateDataLength: 0,
    txPointerBlockHeight: 0,
    txPointerTxIndex: 0,
    utxoId: new Uint8Array(0),
    witnessIndex: 0,
    createdAt: undefined,
    publishedAt: undefined,
  };
}

export const InputCoin: MessageFns<InputCoin> = {
  encode(message: InputCoin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.txId.length !== 0) {
      writer.uint32(18).bytes(message.txId);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int64(message.amount);
    }
    if (message.assetId.length !== 0) {
      writer.uint32(34).bytes(message.assetId);
    }
    if (message.ownerAddress.length !== 0) {
      writer.uint32(42).bytes(message.ownerAddress);
    }
    if (message.outputIndex !== 0) {
      writer.uint32(48).int32(message.outputIndex);
    }
    if (message.predicate.length !== 0) {
      writer.uint32(58).bytes(message.predicate);
    }
    if (message.predicateData.length !== 0) {
      writer.uint32(66).bytes(message.predicateData);
    }
    if (message.predicateGasUsed !== 0) {
      writer.uint32(72).int64(message.predicateGasUsed);
    }
    if (message.predicateLength !== 0) {
      writer.uint32(80).int64(message.predicateLength);
    }
    if (message.predicateDataLength !== 0) {
      writer.uint32(88).int64(message.predicateDataLength);
    }
    if (message.txPointerBlockHeight !== 0) {
      writer.uint32(96).int64(message.txPointerBlockHeight);
    }
    if (message.txPointerTxIndex !== 0) {
      writer.uint32(104).int32(message.txPointerTxIndex);
    }
    if (message.utxoId.length !== 0) {
      writer.uint32(114).bytes(message.utxoId);
    }
    if (message.witnessIndex !== 0) {
      writer.uint32(120).int32(message.witnessIndex);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(130).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputCoin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.assetId = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ownerAddress = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.outputIndex = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.predicate = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.predicateData = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.predicateGasUsed = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.predicateLength = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.predicateDataLength = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.txPointerBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.txPointerTxIndex = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.utxoId = reader.bytes();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.witnessIndex = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputCoin {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      txId: isSet(object.txId) ? bytesFromBase64(object.txId) : new Uint8Array(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      assetId: isSet(object.assetId) ? bytesFromBase64(object.assetId) : new Uint8Array(0),
      ownerAddress: isSet(object.ownerAddress) ? bytesFromBase64(object.ownerAddress) : new Uint8Array(0),
      outputIndex: isSet(object.outputIndex) ? globalThis.Number(object.outputIndex) : 0,
      predicate: isSet(object.predicate) ? bytesFromBase64(object.predicate) : new Uint8Array(0),
      predicateData: isSet(object.predicateData) ? bytesFromBase64(object.predicateData) : new Uint8Array(0),
      predicateGasUsed: isSet(object.predicateGasUsed) ? globalThis.Number(object.predicateGasUsed) : 0,
      predicateLength: isSet(object.predicateLength) ? globalThis.Number(object.predicateLength) : 0,
      predicateDataLength: isSet(object.predicateDataLength) ? globalThis.Number(object.predicateDataLength) : 0,
      txPointerBlockHeight: isSet(object.txPointerBlockHeight) ? globalThis.Number(object.txPointerBlockHeight) : 0,
      txPointerTxIndex: isSet(object.txPointerTxIndex) ? globalThis.Number(object.txPointerTxIndex) : 0,
      utxoId: isSet(object.utxoId) ? bytesFromBase64(object.utxoId) : new Uint8Array(0),
      witnessIndex: isSet(object.witnessIndex) ? globalThis.Number(object.witnessIndex) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
    };
  },

  toJSON(message: InputCoin): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.assetId.length !== 0) {
      obj.assetId = base64FromBytes(message.assetId);
    }
    if (message.ownerAddress.length !== 0) {
      obj.ownerAddress = base64FromBytes(message.ownerAddress);
    }
    if (message.outputIndex !== 0) {
      obj.outputIndex = Math.round(message.outputIndex);
    }
    if (message.predicate.length !== 0) {
      obj.predicate = base64FromBytes(message.predicate);
    }
    if (message.predicateData.length !== 0) {
      obj.predicateData = base64FromBytes(message.predicateData);
    }
    if (message.predicateGasUsed !== 0) {
      obj.predicateGasUsed = Math.round(message.predicateGasUsed);
    }
    if (message.predicateLength !== 0) {
      obj.predicateLength = Math.round(message.predicateLength);
    }
    if (message.predicateDataLength !== 0) {
      obj.predicateDataLength = Math.round(message.predicateDataLength);
    }
    if (message.txPointerBlockHeight !== 0) {
      obj.txPointerBlockHeight = Math.round(message.txPointerBlockHeight);
    }
    if (message.txPointerTxIndex !== 0) {
      obj.txPointerTxIndex = Math.round(message.txPointerTxIndex);
    }
    if (message.utxoId.length !== 0) {
      obj.utxoId = base64FromBytes(message.utxoId);
    }
    if (message.witnessIndex !== 0) {
      obj.witnessIndex = Math.round(message.witnessIndex);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputCoin>, I>>(base?: I): InputCoin {
    return InputCoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputCoin>, I>>(object: I): InputCoin {
    const message = createBaseInputCoin();
    message.subject = object.subject ?? "";
    message.txId = object.txId ?? new Uint8Array(0);
    message.amount = object.amount ?? 0;
    message.assetId = object.assetId ?? new Uint8Array(0);
    message.ownerAddress = object.ownerAddress ?? new Uint8Array(0);
    message.outputIndex = object.outputIndex ?? 0;
    message.predicate = object.predicate ?? new Uint8Array(0);
    message.predicateData = object.predicateData ?? new Uint8Array(0);
    message.predicateGasUsed = object.predicateGasUsed ?? 0;
    message.predicateLength = object.predicateLength ?? 0;
    message.predicateDataLength = object.predicateDataLength ?? 0;
    message.txPointerBlockHeight = object.txPointerBlockHeight ?? 0;
    message.txPointerTxIndex = object.txPointerTxIndex ?? 0;
    message.utxoId = object.utxoId ?? new Uint8Array(0);
    message.witnessIndex = object.witnessIndex ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    return message;
  },
};

function createBaseInputContract(): InputContract {
  return {
    subject: "",
    txId: new Uint8Array(0),
    balanceRoot: new Uint8Array(0),
    contractId: new Uint8Array(0),
    outputIndex: 0,
    stateRoot: new Uint8Array(0),
    txPointerBlockHeight: 0,
    txPointerTxIndex: 0,
    utxoId: new Uint8Array(0),
    createdAt: undefined,
    publishedAt: undefined,
  };
}

export const InputContract: MessageFns<InputContract> = {
  encode(message: InputContract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.txId.length !== 0) {
      writer.uint32(18).bytes(message.txId);
    }
    if (message.balanceRoot.length !== 0) {
      writer.uint32(26).bytes(message.balanceRoot);
    }
    if (message.contractId.length !== 0) {
      writer.uint32(34).bytes(message.contractId);
    }
    if (message.outputIndex !== 0) {
      writer.uint32(40).int32(message.outputIndex);
    }
    if (message.stateRoot.length !== 0) {
      writer.uint32(50).bytes(message.stateRoot);
    }
    if (message.txPointerBlockHeight !== 0) {
      writer.uint32(56).int64(message.txPointerBlockHeight);
    }
    if (message.txPointerTxIndex !== 0) {
      writer.uint32(64).int32(message.txPointerTxIndex);
    }
    if (message.utxoId.length !== 0) {
      writer.uint32(74).bytes(message.utxoId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputContract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.balanceRoot = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contractId = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.outputIndex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.stateRoot = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.txPointerBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.txPointerTxIndex = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.utxoId = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputContract {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      txId: isSet(object.txId) ? bytesFromBase64(object.txId) : new Uint8Array(0),
      balanceRoot: isSet(object.balanceRoot) ? bytesFromBase64(object.balanceRoot) : new Uint8Array(0),
      contractId: isSet(object.contractId) ? bytesFromBase64(object.contractId) : new Uint8Array(0),
      outputIndex: isSet(object.outputIndex) ? globalThis.Number(object.outputIndex) : 0,
      stateRoot: isSet(object.stateRoot) ? bytesFromBase64(object.stateRoot) : new Uint8Array(0),
      txPointerBlockHeight: isSet(object.txPointerBlockHeight) ? globalThis.Number(object.txPointerBlockHeight) : 0,
      txPointerTxIndex: isSet(object.txPointerTxIndex) ? globalThis.Number(object.txPointerTxIndex) : 0,
      utxoId: isSet(object.utxoId) ? bytesFromBase64(object.utxoId) : new Uint8Array(0),
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
    };
  },

  toJSON(message: InputContract): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.balanceRoot.length !== 0) {
      obj.balanceRoot = base64FromBytes(message.balanceRoot);
    }
    if (message.contractId.length !== 0) {
      obj.contractId = base64FromBytes(message.contractId);
    }
    if (message.outputIndex !== 0) {
      obj.outputIndex = Math.round(message.outputIndex);
    }
    if (message.stateRoot.length !== 0) {
      obj.stateRoot = base64FromBytes(message.stateRoot);
    }
    if (message.txPointerBlockHeight !== 0) {
      obj.txPointerBlockHeight = Math.round(message.txPointerBlockHeight);
    }
    if (message.txPointerTxIndex !== 0) {
      obj.txPointerTxIndex = Math.round(message.txPointerTxIndex);
    }
    if (message.utxoId.length !== 0) {
      obj.utxoId = base64FromBytes(message.utxoId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputContract>, I>>(base?: I): InputContract {
    return InputContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputContract>, I>>(object: I): InputContract {
    const message = createBaseInputContract();
    message.subject = object.subject ?? "";
    message.txId = object.txId ?? new Uint8Array(0);
    message.balanceRoot = object.balanceRoot ?? new Uint8Array(0);
    message.contractId = object.contractId ?? new Uint8Array(0);
    message.outputIndex = object.outputIndex ?? 0;
    message.stateRoot = object.stateRoot ?? new Uint8Array(0);
    message.txPointerBlockHeight = object.txPointerBlockHeight ?? 0;
    message.txPointerTxIndex = object.txPointerTxIndex ?? 0;
    message.utxoId = object.utxoId ?? new Uint8Array(0);
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    return message;
  },
};

function createBaseInputMessage(): InputMessage {
  return {
    subject: "",
    txId: new Uint8Array(0),
    amount: 0,
    data: new Uint8Array(0),
    dataLength: 0,
    nonce: new Uint8Array(0),
    predicate: new Uint8Array(0),
    predicateLength: 0,
    predicateData: new Uint8Array(0),
    predicateDataLength: 0,
    predicateGasUsed: 0,
    recipientAddress: new Uint8Array(0),
    senderAddress: new Uint8Array(0),
    witnessIndex: 0,
    createdAt: undefined,
    publishedAt: undefined,
  };
}

export const InputMessage: MessageFns<InputMessage> = {
  encode(message: InputMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subject !== "") {
      writer.uint32(10).string(message.subject);
    }
    if (message.txId.length !== 0) {
      writer.uint32(18).bytes(message.txId);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int64(message.amount);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    if (message.dataLength !== 0) {
      writer.uint32(40).int32(message.dataLength);
    }
    if (message.nonce.length !== 0) {
      writer.uint32(50).bytes(message.nonce);
    }
    if (message.predicate.length !== 0) {
      writer.uint32(58).bytes(message.predicate);
    }
    if (message.predicateLength !== 0) {
      writer.uint32(64).int32(message.predicateLength);
    }
    if (message.predicateData.length !== 0) {
      writer.uint32(74).bytes(message.predicateData);
    }
    if (message.predicateDataLength !== 0) {
      writer.uint32(80).int32(message.predicateDataLength);
    }
    if (message.predicateGasUsed !== 0) {
      writer.uint32(88).int64(message.predicateGasUsed);
    }
    if (message.recipientAddress.length !== 0) {
      writer.uint32(98).bytes(message.recipientAddress);
    }
    if (message.senderAddress.length !== 0) {
      writer.uint32(106).bytes(message.senderAddress);
    }
    if (message.witnessIndex !== 0) {
      writer.uint32(112).int32(message.witnessIndex);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(122).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.dataLength = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nonce = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.predicate = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.predicateLength = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.predicateData = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.predicateDataLength = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.predicateGasUsed = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.recipientAddress = reader.bytes();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.senderAddress = reader.bytes();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.witnessIndex = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputMessage {
    return {
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      txId: isSet(object.txId) ? bytesFromBase64(object.txId) : new Uint8Array(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      dataLength: isSet(object.dataLength) ? globalThis.Number(object.dataLength) : 0,
      nonce: isSet(object.nonce) ? bytesFromBase64(object.nonce) : new Uint8Array(0),
      predicate: isSet(object.predicate) ? bytesFromBase64(object.predicate) : new Uint8Array(0),
      predicateLength: isSet(object.predicateLength) ? globalThis.Number(object.predicateLength) : 0,
      predicateData: isSet(object.predicateData) ? bytesFromBase64(object.predicateData) : new Uint8Array(0),
      predicateDataLength: isSet(object.predicateDataLength) ? globalThis.Number(object.predicateDataLength) : 0,
      predicateGasUsed: isSet(object.predicateGasUsed) ? globalThis.Number(object.predicateGasUsed) : 0,
      recipientAddress: isSet(object.recipientAddress) ? bytesFromBase64(object.recipientAddress) : new Uint8Array(0),
      senderAddress: isSet(object.senderAddress) ? bytesFromBase64(object.senderAddress) : new Uint8Array(0),
      witnessIndex: isSet(object.witnessIndex) ? globalThis.Number(object.witnessIndex) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
    };
  },

  toJSON(message: InputMessage): unknown {
    const obj: any = {};
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.dataLength !== 0) {
      obj.dataLength = Math.round(message.dataLength);
    }
    if (message.nonce.length !== 0) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    if (message.predicate.length !== 0) {
      obj.predicate = base64FromBytes(message.predicate);
    }
    if (message.predicateLength !== 0) {
      obj.predicateLength = Math.round(message.predicateLength);
    }
    if (message.predicateData.length !== 0) {
      obj.predicateData = base64FromBytes(message.predicateData);
    }
    if (message.predicateDataLength !== 0) {
      obj.predicateDataLength = Math.round(message.predicateDataLength);
    }
    if (message.predicateGasUsed !== 0) {
      obj.predicateGasUsed = Math.round(message.predicateGasUsed);
    }
    if (message.recipientAddress.length !== 0) {
      obj.recipientAddress = base64FromBytes(message.recipientAddress);
    }
    if (message.senderAddress.length !== 0) {
      obj.senderAddress = base64FromBytes(message.senderAddress);
    }
    if (message.witnessIndex !== 0) {
      obj.witnessIndex = Math.round(message.witnessIndex);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputMessage>, I>>(base?: I): InputMessage {
    return InputMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputMessage>, I>>(object: I): InputMessage {
    const message = createBaseInputMessage();
    message.subject = object.subject ?? "";
    message.txId = object.txId ?? new Uint8Array(0);
    message.amount = object.amount ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.dataLength = object.dataLength ?? 0;
    message.nonce = object.nonce ?? new Uint8Array(0);
    message.predicate = object.predicate ?? new Uint8Array(0);
    message.predicateLength = object.predicateLength ?? 0;
    message.predicateData = object.predicateData ?? new Uint8Array(0);
    message.predicateDataLength = object.predicateDataLength ?? 0;
    message.predicateGasUsed = object.predicateGasUsed ?? 0;
    message.recipientAddress = object.recipientAddress ?? new Uint8Array(0);
    message.senderAddress = object.senderAddress ?? new Uint8Array(0);
    message.witnessIndex = object.witnessIndex ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
