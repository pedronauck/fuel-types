// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file inputs.proto (package inputs, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { InputPointer } from "./pointers_pb";
import { file_pointers } from "./pointers_pb";
import type { Metadata } from "./common_pb";
import { file_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file inputs.proto.
 */
export const file_inputs: GenFile = /*@__PURE__*/
  fileDesc("CgxpbnB1dHMucHJvdG8SBmlucHV0cyL0AQoFSW5wdXQSHwoEdHlwZRgBIAEoDjIRLmlucHV0cy5JbnB1dFR5cGUSJwoHcG9pbnRlchgCIAEoCzIWLnBvaW50ZXJzLklucHV0UG9pbnRlchIhCgRjb2luGAMgASgLMhEuaW5wdXRzLklucHV0Q29pbkgAEikKCGNvbnRyYWN0GAQgASgLMhUuaW5wdXRzLklucHV0Q29udHJhY3RIABInCgdtZXNzYWdlGAUgASgLMhQuaW5wdXRzLklucHV0TWVzc2FnZUgAEiIKCG1ldGFkYXRhGAYgASgLMhAuY29tbW9uLk1ldGFkYXRhQgYKBGRhdGEi+gEKCUlucHV0Q29pbhIPCgd1dHhvX2lkGAEgASgJEg0KBW93bmVyGAIgASgJEg4KBmFtb3VudBgDIAEoAxIQCghhc3NldF9pZBgEIAEoCRIVCg13aXRuZXNzX2luZGV4GAUgASgFEhoKEnByZWRpY2F0ZV9nYXNfdXNlZBgGIAEoAxIRCglwcmVkaWNhdGUYByABKAkSFgoOcHJlZGljYXRlX2RhdGEYCCABKAkSGAoQcHJlZGljYXRlX2xlbmd0aBgJIAEoAxIdChVwcmVkaWNhdGVfZGF0YV9sZW5ndGgYCiABKAMSFAoMb3V0cHV0X2luZGV4GAsgASgFInUKDUlucHV0Q29udHJhY3QSDwoHdXR4b19pZBgBIAEoCRIUCgxiYWxhbmNlX3Jvb3QYAiABKAkSEgoKc3RhdGVfcm9vdBgDIAEoCRITCgtjb250cmFjdF9pZBgEIAEoCRIUCgxvdXRwdXRfaW5kZXgYBSABKAUiigIKDElucHV0TWVzc2FnZRIOCgZzZW5kZXIYASABKAkSEQoJcmVjaXBpZW50GAIgASgJEg4KBmFtb3VudBgDIAEoAxINCgVub25jZRgEIAEoCRIVCg13aXRuZXNzX2luZGV4GAUgASgFEhoKEnByZWRpY2F0ZV9nYXNfdXNlZBgGIAEoAxIMCgRkYXRhGAcgASgJEhEKCXByZWRpY2F0ZRgIIAEoCRIWCg5wcmVkaWNhdGVfZGF0YRgJIAEoCRITCgtkYXRhX2xlbmd0aBgKIAEoBRIYChBwcmVkaWNhdGVfbGVuZ3RoGAsgASgFEh0KFXByZWRpY2F0ZV9kYXRhX2xlbmd0aBgMIAEoBSpICglJbnB1dFR5cGUSFgoSVU5LTk9XTl9JTlBVVF9UWVBFEAASDAoIQ09OVFJBQ1QQARIICgRDT0lOEAISCwoHTUVTU0FHRRADYgZwcm90bzM", [file_pointers, file_common]);

/**
 * @generated from message inputs.Input
 */
export type Input = Message<"inputs.Input"> & {
  /**
   * @generated from field: inputs.InputType type = 1;
   */
  type: InputType;

  /**
   * @generated from field: pointers.InputPointer pointer = 2;
   */
  pointer?: InputPointer;

  /**
   * @generated from oneof inputs.Input.data
   */
  data: {
    /**
     * @generated from field: inputs.InputCoin coin = 3;
     */
    value: InputCoin;
    case: "coin";
  } | {
    /**
     * @generated from field: inputs.InputContract contract = 4;
     */
    value: InputContract;
    case: "contract";
  } | {
    /**
     * @generated from field: inputs.InputMessage message = 5;
     */
    value: InputMessage;
    case: "message";
  } | { case: undefined; value?: undefined };

  /**
   * Metadata
   *
   * @generated from field: common.Metadata metadata = 6;
   */
  metadata?: Metadata;
};

/**
 * Describes the message inputs.Input.
 * Use `create(InputSchema)` to create a new message.
 */
export const InputSchema: GenMessage<Input> = /*@__PURE__*/
  messageDesc(file_inputs, 0);

/**
 * @generated from message inputs.InputCoin
 */
export type InputCoin = Message<"inputs.InputCoin"> & {
  /**
   * Fields matching fuel-core
   *
   * @generated from field: string utxo_id = 1;
   */
  utxoId: string;

  /**
   * @generated from field: string owner = 2;
   */
  owner: string;

  /**
   * @generated from field: int64 amount = 3;
   */
  amount: bigint;

  /**
   * @generated from field: string asset_id = 4;
   */
  assetId: string;

  /**
   * @generated from field: int32 witness_index = 5;
   */
  witnessIndex: number;

  /**
   * @generated from field: int64 predicate_gas_used = 6;
   */
  predicateGasUsed: bigint;

  /**
   * @generated from field: string predicate = 7;
   */
  predicate: string;

  /**
   * @generated from field: string predicate_data = 8;
   */
  predicateData: string;

  /**
   * Extra fields (not in fuel-core)
   *
   * @generated from field: int64 predicate_length = 9;
   */
  predicateLength: bigint;

  /**
   * @generated from field: int64 predicate_data_length = 10;
   */
  predicateDataLength: bigint;

  /**
   * @generated from field: int32 output_index = 11;
   */
  outputIndex: number;
};

/**
 * Describes the message inputs.InputCoin.
 * Use `create(InputCoinSchema)` to create a new message.
 */
export const InputCoinSchema: GenMessage<InputCoin> = /*@__PURE__*/
  messageDesc(file_inputs, 1);

/**
 * @generated from message inputs.InputContract
 */
export type InputContract = Message<"inputs.InputContract"> & {
  /**
   * Fields matching fuel-core
   *
   * @generated from field: string utxo_id = 1;
   */
  utxoId: string;

  /**
   * @generated from field: string balance_root = 2;
   */
  balanceRoot: string;

  /**
   * @generated from field: string state_root = 3;
   */
  stateRoot: string;

  /**
   * @generated from field: string contract_id = 4;
   */
  contractId: string;

  /**
   * Extra fields (not in fuel-core)
   *
   * @generated from field: int32 output_index = 5;
   */
  outputIndex: number;
};

/**
 * Describes the message inputs.InputContract.
 * Use `create(InputContractSchema)` to create a new message.
 */
export const InputContractSchema: GenMessage<InputContract> = /*@__PURE__*/
  messageDesc(file_inputs, 2);

/**
 * @generated from message inputs.InputMessage
 */
export type InputMessage = Message<"inputs.InputMessage"> & {
  /**
   * Fields matching fuel-core
   *
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string recipient = 2;
   */
  recipient: string;

  /**
   * @generated from field: int64 amount = 3;
   */
  amount: bigint;

  /**
   * @generated from field: string nonce = 4;
   */
  nonce: string;

  /**
   * @generated from field: int32 witness_index = 5;
   */
  witnessIndex: number;

  /**
   * @generated from field: int64 predicate_gas_used = 6;
   */
  predicateGasUsed: bigint;

  /**
   * @generated from field: string data = 7;
   */
  data: string;

  /**
   * @generated from field: string predicate = 8;
   */
  predicate: string;

  /**
   * @generated from field: string predicate_data = 9;
   */
  predicateData: string;

  /**
   * Extra fields (not in fuel-core)
   *
   * @generated from field: int32 data_length = 10;
   */
  dataLength: number;

  /**
   * @generated from field: int32 predicate_length = 11;
   */
  predicateLength: number;

  /**
   * @generated from field: int32 predicate_data_length = 12;
   */
  predicateDataLength: number;
};

/**
 * Describes the message inputs.InputMessage.
 * Use `create(InputMessageSchema)` to create a new message.
 */
export const InputMessageSchema: GenMessage<InputMessage> = /*@__PURE__*/
  messageDesc(file_inputs, 3);

/**
 * @generated from enum inputs.InputType
 */
export enum InputType {
  /**
   * @generated from enum value: UNKNOWN_INPUT_TYPE = 0;
   */
  UNKNOWN_INPUT_TYPE = 0,

  /**
   * @generated from enum value: CONTRACT = 1;
   */
  CONTRACT = 1,

  /**
   * @generated from enum value: COIN = 2;
   */
  COIN = 2,

  /**
   * @generated from enum value: MESSAGE = 3;
   */
  MESSAGE = 3,
}

/**
 * Describes the enum inputs.InputType.
 */
export const InputTypeSchema: GenEnum<InputType> = /*@__PURE__*/
  enumDesc(file_inputs, 0);

