// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file inputs.proto (package inputs, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { InputPointer, TxPointer } from "./pointers_pb";
import { file_pointers } from "./pointers_pb";
import type { Metadata } from "./common_pb";
import { file_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file inputs.proto.
 */
export const file_inputs: GenFile = /*@__PURE__*/
  fileDesc("CgxpbnB1dHMucHJvdG8SBmlucHV0cyKGAgoFSW5wdXQSDwoHc3ViamVjdBgBIAEoCRIfCgR0eXBlGAIgASgOMhEuaW5wdXRzLklucHV0VHlwZRIhCgRjb2luGAMgASgLMhEuaW5wdXRzLklucHV0Q29pbkgAEikKCGNvbnRyYWN0GAQgASgLMhUuaW5wdXRzLklucHV0Q29udHJhY3RIABInCgdtZXNzYWdlGAUgASgLMhQuaW5wdXRzLklucHV0TWVzc2FnZUgAEiIKCG1ldGFkYXRhGAcgASgLMhAuY29tbW9uLk1ldGFkYXRhEicKB3BvaW50ZXIYCCABKAsyFi5wb2ludGVycy5JbnB1dFBvaW50ZXJCBwoFaW5wdXQiowIKCUlucHV0Q29pbhIPCgd1dHhvX2lkGAEgASgMEg0KBW93bmVyGAIgASgMEg4KBmFtb3VudBgDIAEoAxIQCghhc3NldF9pZBgEIAEoDBInCgp0eF9wb2ludGVyGAUgASgLMhMucG9pbnRlcnMuVHhQb2ludGVyEhUKDXdpdG5lc3NfaW5kZXgYBiABKAUSGgoScHJlZGljYXRlX2dhc191c2VkGAcgASgDEhEKCXByZWRpY2F0ZRgIIAEoDBIWCg5wcmVkaWNhdGVfZGF0YRgJIAEoDBIYChBwcmVkaWNhdGVfbGVuZ3RoGAogASgDEh0KFXByZWRpY2F0ZV9kYXRhX2xlbmd0aBgLIAEoAxIUCgxvdXRwdXRfaW5kZXgYDCABKAUingEKDUlucHV0Q29udHJhY3QSDwoHdXR4b19pZBgBIAEoDBIUCgxiYWxhbmNlX3Jvb3QYAiABKAwSEgoKc3RhdGVfcm9vdBgDIAEoDBInCgp0eF9wb2ludGVyGAQgASgLMhMucG9pbnRlcnMuVHhQb2ludGVyEhMKC2NvbnRyYWN0X2lkGAUgASgMEhQKDG91dHB1dF9pbmRleBgGIAEoBSKKAgoMSW5wdXRNZXNzYWdlEg4KBnNlbmRlchgBIAEoDBIRCglyZWNpcGllbnQYAiABKAwSDgoGYW1vdW50GAMgASgDEg0KBW5vbmNlGAQgASgMEhUKDXdpdG5lc3NfaW5kZXgYBSABKAUSGgoScHJlZGljYXRlX2dhc191c2VkGAYgASgDEgwKBGRhdGEYByABKAwSEQoJcHJlZGljYXRlGAggASgMEhYKDnByZWRpY2F0ZV9kYXRhGAkgASgMEhMKC2RhdGFfbGVuZ3RoGAogASgFEhgKEHByZWRpY2F0ZV9sZW5ndGgYCyABKAUSHQoVcHJlZGljYXRlX2RhdGFfbGVuZ3RoGAwgASgFKkgKCUlucHV0VHlwZRIWChJVTktOT1dOX0lOUFVUX1RZUEUQABIMCghDT05UUkFDVBABEggKBENPSU4QAhILCgdNRVNTQUdFEANiBnByb3RvMw", [file_pointers, file_common]);

/**
 * @generated from message inputs.Input
 */
export type Input = Message<"inputs.Input"> & {
  /**
   * @generated from field: string subject = 1;
   */
  subject: string;

  /**
   * @generated from field: inputs.InputType type = 2;
   */
  type: InputType;

  /**
   * @generated from oneof inputs.Input.input
   */
  input: {
    /**
     * @generated from field: inputs.InputCoin coin = 3;
     */
    value: InputCoin;
    case: "coin";
  } | {
    /**
     * @generated from field: inputs.InputContract contract = 4;
     */
    value: InputContract;
    case: "contract";
  } | {
    /**
     * @generated from field: inputs.InputMessage message = 5;
     */
    value: InputMessage;
    case: "message";
  } | { case: undefined; value?: undefined };

  /**
   * Metadata
   *
   * @generated from field: common.Metadata metadata = 7;
   */
  metadata?: Metadata;

  /**
   * @generated from field: pointers.InputPointer pointer = 8;
   */
  pointer?: InputPointer;
};

/**
 * Describes the message inputs.Input.
 * Use `create(InputSchema)` to create a new message.
 */
export const InputSchema: GenMessage<Input> = /*@__PURE__*/
  messageDesc(file_inputs, 0);

/**
 * @generated from message inputs.InputCoin
 */
export type InputCoin = Message<"inputs.InputCoin"> & {
  /**
   * Fields matching fuel-core
   *
   * @generated from field: bytes utxo_id = 1;
   */
  utxoId: Uint8Array;

  /**
   * @generated from field: bytes owner = 2;
   */
  owner: Uint8Array;

  /**
   * @generated from field: int64 amount = 3;
   */
  amount: bigint;

  /**
   * @generated from field: bytes asset_id = 4;
   */
  assetId: Uint8Array;

  /**
   * @generated from field: pointers.TxPointer tx_pointer = 5;
   */
  txPointer?: TxPointer;

  /**
   * @generated from field: int32 witness_index = 6;
   */
  witnessIndex: number;

  /**
   * @generated from field: int64 predicate_gas_used = 7;
   */
  predicateGasUsed: bigint;

  /**
   * @generated from field: bytes predicate = 8;
   */
  predicate: Uint8Array;

  /**
   * @generated from field: bytes predicate_data = 9;
   */
  predicateData: Uint8Array;

  /**
   * Extra fields (not in fuel-core)
   *
   * @generated from field: int64 predicate_length = 10;
   */
  predicateLength: bigint;

  /**
   * @generated from field: int64 predicate_data_length = 11;
   */
  predicateDataLength: bigint;

  /**
   * @generated from field: int32 output_index = 12;
   */
  outputIndex: number;
};

/**
 * Describes the message inputs.InputCoin.
 * Use `create(InputCoinSchema)` to create a new message.
 */
export const InputCoinSchema: GenMessage<InputCoin> = /*@__PURE__*/
  messageDesc(file_inputs, 1);

/**
 * @generated from message inputs.InputContract
 */
export type InputContract = Message<"inputs.InputContract"> & {
  /**
   * Fields matching fuel-core
   *
   * @generated from field: bytes utxo_id = 1;
   */
  utxoId: Uint8Array;

  /**
   * @generated from field: bytes balance_root = 2;
   */
  balanceRoot: Uint8Array;

  /**
   * @generated from field: bytes state_root = 3;
   */
  stateRoot: Uint8Array;

  /**
   * @generated from field: pointers.TxPointer tx_pointer = 4;
   */
  txPointer?: TxPointer;

  /**
   * @generated from field: bytes contract_id = 5;
   */
  contractId: Uint8Array;

  /**
   * Extra fields (not in fuel-core)
   *
   * @generated from field: int32 output_index = 6;
   */
  outputIndex: number;
};

/**
 * Describes the message inputs.InputContract.
 * Use `create(InputContractSchema)` to create a new message.
 */
export const InputContractSchema: GenMessage<InputContract> = /*@__PURE__*/
  messageDesc(file_inputs, 2);

/**
 * @generated from message inputs.InputMessage
 */
export type InputMessage = Message<"inputs.InputMessage"> & {
  /**
   * Fields matching fuel-core
   *
   * @generated from field: bytes sender = 1;
   */
  sender: Uint8Array;

  /**
   * @generated from field: bytes recipient = 2;
   */
  recipient: Uint8Array;

  /**
   * @generated from field: int64 amount = 3;
   */
  amount: bigint;

  /**
   * @generated from field: bytes nonce = 4;
   */
  nonce: Uint8Array;

  /**
   * @generated from field: int32 witness_index = 5;
   */
  witnessIndex: number;

  /**
   * @generated from field: int64 predicate_gas_used = 6;
   */
  predicateGasUsed: bigint;

  /**
   * @generated from field: bytes data = 7;
   */
  data: Uint8Array;

  /**
   * @generated from field: bytes predicate = 8;
   */
  predicate: Uint8Array;

  /**
   * @generated from field: bytes predicate_data = 9;
   */
  predicateData: Uint8Array;

  /**
   * Extra fields (not in fuel-core)
   *
   * @generated from field: int32 data_length = 10;
   */
  dataLength: number;

  /**
   * @generated from field: int32 predicate_length = 11;
   */
  predicateLength: number;

  /**
   * @generated from field: int32 predicate_data_length = 12;
   */
  predicateDataLength: number;
};

/**
 * Describes the message inputs.InputMessage.
 * Use `create(InputMessageSchema)` to create a new message.
 */
export const InputMessageSchema: GenMessage<InputMessage> = /*@__PURE__*/
  messageDesc(file_inputs, 3);

/**
 * @generated from enum inputs.InputType
 */
export enum InputType {
  /**
   * @generated from enum value: UNKNOWN_INPUT_TYPE = 0;
   */
  UNKNOWN_INPUT_TYPE = 0,

  /**
   * @generated from enum value: CONTRACT = 1;
   */
  CONTRACT = 1,

  /**
   * @generated from enum value: COIN = 2;
   */
  COIN = 2,

  /**
   * @generated from enum value: MESSAGE = 3;
   */
  MESSAGE = 3,
}

/**
 * Describes the enum inputs.InputType.
 */
export const InputTypeSchema: GenEnum<InputType> = /*@__PURE__*/
  enumDesc(file_inputs, 0);

