// source: blocks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var pointers_pb = require('./pointers_pb.js');
goog.object.extend(proto, pointers_pb);
goog.exportSymbol('proto.blocks.Block', null, global);
goog.exportSymbol('proto.blocks.BlockConsensus', null, global);
goog.exportSymbol('proto.blocks.BlockHeader', null, global);
goog.exportSymbol('proto.blocks.ConsensusType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blocks.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blocks.Block.repeatedFields_, null);
};
goog.inherits(proto.blocks.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blocks.Block.displayName = 'proto.blocks.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blocks.BlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blocks.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blocks.BlockHeader.displayName = 'proto.blocks.BlockHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blocks.BlockConsensus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blocks.BlockConsensus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blocks.BlockConsensus.displayName = 'proto.blocks.BlockConsensus';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blocks.Block.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blocks.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.blocks.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blocks.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blocks.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    producerAddress: msg.getProducerAddress_asB64(),
    blockId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    version: jspb.Message.getFieldWithDefault(msg, 5, ""),
    header: (f = msg.getHeader()) && proto.blocks.BlockHeader.toObject(includeInstance, f),
    consensus: (f = msg.getConsensus()) && proto.blocks.BlockConsensus.toObject(includeInstance, f),
    transactionIdsList: msg.getTransactionIdsList_asB64(),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    publishedAt: (f = msg.getPublishedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    pointer: (f = msg.getPointer()) && pointers_pb.BlockPointer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blocks.Block}
 */
proto.blocks.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blocks.Block;
  return proto.blocks.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blocks.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blocks.Block}
 */
proto.blocks.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProducerAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 6:
      var value = new proto.blocks.BlockHeader;
      reader.readMessage(value,proto.blocks.BlockHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 7:
      var value = new proto.blocks.BlockConsensus;
      reader.readMessage(value,proto.blocks.BlockConsensus.deserializeBinaryFromReader);
      msg.setConsensus(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactionIds(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setPublishedAt(value);
      break;
    case 11:
      var value = new pointers_pb.BlockPointer;
      reader.readMessage(value,pointers_pb.BlockPointer.deserializeBinaryFromReader);
      msg.setPointer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blocks.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blocks.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blocks.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blocks.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProducerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBlockId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.blocks.BlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getConsensus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.blocks.BlockConsensus.serializeBinaryToWriter
    );
  }
  f = message.getTransactionIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPublishedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPointer();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      pointers_pb.BlockPointer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.blocks.Block.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 block_height = 2;
 * @return {number}
 */
proto.blocks.Block.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes producer_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.Block.prototype.getProducerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes producer_address = 3;
 * This is a type-conversion wrapper around `getProducerAddress()`
 * @return {string}
 */
proto.blocks.Block.prototype.getProducerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProducerAddress()));
};


/**
 * optional bytes producer_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProducerAddress()`
 * @return {!Uint8Array}
 */
proto.blocks.Block.prototype.getProducerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProducerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.setProducerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 block_id = 4;
 * @return {number}
 */
proto.blocks.Block.prototype.getBlockId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.blocks.Block.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional BlockHeader header = 6;
 * @return {?proto.blocks.BlockHeader}
 */
proto.blocks.Block.prototype.getHeader = function() {
  return /** @type{?proto.blocks.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.blocks.BlockHeader, 6));
};


/**
 * @param {?proto.blocks.BlockHeader|undefined} value
 * @return {!proto.blocks.Block} returns this
*/
proto.blocks.Block.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BlockConsensus consensus = 7;
 * @return {?proto.blocks.BlockConsensus}
 */
proto.blocks.Block.prototype.getConsensus = function() {
  return /** @type{?proto.blocks.BlockConsensus} */ (
    jspb.Message.getWrapperField(this, proto.blocks.BlockConsensus, 7));
};


/**
 * @param {?proto.blocks.BlockConsensus|undefined} value
 * @return {!proto.blocks.Block} returns this
*/
proto.blocks.Block.prototype.setConsensus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.clearConsensus = function() {
  return this.setConsensus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.Block.prototype.hasConsensus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated bytes transaction_ids = 8;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.blocks.Block.prototype.getTransactionIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * repeated bytes transaction_ids = 8;
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<string>}
 */
proto.blocks.Block.prototype.getTransactionIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionIdsList()));
};


/**
 * repeated bytes transaction_ids = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.blocks.Block.prototype.getTransactionIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.setTransactionIdsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.addTransactionIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.clearTransactionIdsList = function() {
  return this.setTransactionIdsList([]);
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blocks.Block.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blocks.Block} returns this
*/
proto.blocks.Block.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.Block.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional google.protobuf.Timestamp published_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blocks.Block.prototype.getPublishedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blocks.Block} returns this
*/
proto.blocks.Block.prototype.setPublishedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.clearPublishedAt = function() {
  return this.setPublishedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.Block.prototype.hasPublishedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional pointers.BlockPointer pointer = 11;
 * @return {?proto.pointers.BlockPointer}
 */
proto.blocks.Block.prototype.getPointer = function() {
  return /** @type{?proto.pointers.BlockPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.BlockPointer, 11));
};


/**
 * @param {?proto.pointers.BlockPointer|undefined} value
 * @return {!proto.blocks.Block} returns this
*/
proto.blocks.Block.prototype.setPointer = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.Block} returns this
 */
proto.blocks.Block.prototype.clearPointer = function() {
  return this.setPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.Block.prototype.hasPointer = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blocks.BlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.blocks.BlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blocks.BlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blocks.BlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    applicationHash: msg.getApplicationHash_asB64(),
    consensusParametersVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    daHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    eventInboxRoot: msg.getEventInboxRoot_asB64(),
    messageOutboxRoot: msg.getMessageOutboxRoot_asB64(),
    messageReceiptCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    prevRoot: msg.getPrevRoot_asB64(),
    stateTransitionBytecodeVersion: jspb.Message.getFieldWithDefault(msg, 10, 0),
    time: jspb.Message.getFieldWithDefault(msg, 11, 0),
    transactionsCount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    transactionsRoot: msg.getTransactionsRoot_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 14, 0),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    publishedAt: (f = msg.getPublishedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blocks.BlockHeader}
 */
proto.blocks.BlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blocks.BlockHeader;
  return proto.blocks.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blocks.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blocks.BlockHeader}
 */
proto.blocks.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setApplicationHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConsensusParametersVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDaHeight(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEventInboxRoot(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageOutboxRoot(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageReceiptCount(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevRoot(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStateTransitionBytecodeVersion(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransactionsCount(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionsRoot(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 15:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setPublishedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blocks.BlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blocks.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blocks.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blocks.BlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getApplicationHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConsensusParametersVersion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDaHeight();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getEventInboxRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMessageOutboxRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getMessageReceiptCount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPrevRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getStateTransitionBytecodeVersion();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getTransactionsCount();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTransactionsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPublishedAt();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.blocks.BlockHeader.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 block_height = 2;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes application_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockHeader.prototype.getApplicationHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes application_hash = 3;
 * This is a type-conversion wrapper around `getApplicationHash()`
 * @return {string}
 */
proto.blocks.BlockHeader.prototype.getApplicationHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getApplicationHash()));
};


/**
 * optional bytes application_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getApplicationHash()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockHeader.prototype.getApplicationHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getApplicationHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setApplicationHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 consensus_parameters_version = 4;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getConsensusParametersVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setConsensusParametersVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 da_height = 5;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getDaHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setDaHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes event_inbox_root = 6;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockHeader.prototype.getEventInboxRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes event_inbox_root = 6;
 * This is a type-conversion wrapper around `getEventInboxRoot()`
 * @return {string}
 */
proto.blocks.BlockHeader.prototype.getEventInboxRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEventInboxRoot()));
};


/**
 * optional bytes event_inbox_root = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventInboxRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockHeader.prototype.getEventInboxRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEventInboxRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setEventInboxRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes message_outbox_root = 7;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockHeader.prototype.getMessageOutboxRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes message_outbox_root = 7;
 * This is a type-conversion wrapper around `getMessageOutboxRoot()`
 * @return {string}
 */
proto.blocks.BlockHeader.prototype.getMessageOutboxRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageOutboxRoot()));
};


/**
 * optional bytes message_outbox_root = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageOutboxRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockHeader.prototype.getMessageOutboxRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageOutboxRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setMessageOutboxRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional int32 message_receipt_count = 8;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getMessageReceiptCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setMessageReceiptCount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes prev_root = 9;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockHeader.prototype.getPrevRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes prev_root = 9;
 * This is a type-conversion wrapper around `getPrevRoot()`
 * @return {string}
 */
proto.blocks.BlockHeader.prototype.getPrevRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevRoot()));
};


/**
 * optional bytes prev_root = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockHeader.prototype.getPrevRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setPrevRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int32 state_transition_bytecode_version = 10;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getStateTransitionBytecodeVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setStateTransitionBytecodeVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 time = 11;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 transactions_count = 12;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getTransactionsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setTransactionsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bytes transactions_root = 13;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockHeader.prototype.getTransactionsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes transactions_root = 13;
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {string}
 */
proto.blocks.BlockHeader.prototype.getTransactionsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionsRoot()));
};


/**
 * optional bytes transactions_root = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockHeader.prototype.getTransactionsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setTransactionsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional int32 version = 14;
 * @return {number}
 */
proto.blocks.BlockHeader.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 15;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blocks.BlockHeader.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 15));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blocks.BlockHeader} returns this
*/
proto.blocks.BlockHeader.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.BlockHeader.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional google.protobuf.Timestamp published_at = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blocks.BlockHeader.prototype.getPublishedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blocks.BlockHeader} returns this
*/
proto.blocks.BlockHeader.prototype.setPublishedAt = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.BlockHeader} returns this
 */
proto.blocks.BlockHeader.prototype.clearPublishedAt = function() {
  return this.setPublishedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.BlockHeader.prototype.hasPublishedAt = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blocks.BlockConsensus.prototype.toObject = function(opt_includeInstance) {
  return proto.blocks.BlockConsensus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blocks.BlockConsensus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blocks.BlockConsensus.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    consensusType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chainConfigHash: msg.getChainConfigHash_asB64(),
    coinsRoot: msg.getCoinsRoot_asB64(),
    contractsRoot: msg.getContractsRoot_asB64(),
    messagesRoot: msg.getMessagesRoot_asB64(),
    transactionsRoot: msg.getTransactionsRoot_asB64(),
    signature: msg.getSignature_asB64(),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    publishedAt: (f = msg.getPublishedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blocks.BlockConsensus}
 */
proto.blocks.BlockConsensus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blocks.BlockConsensus;
  return proto.blocks.BlockConsensus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blocks.BlockConsensus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blocks.BlockConsensus}
 */
proto.blocks.BlockConsensus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {!proto.blocks.ConsensusType} */ (reader.readEnum());
      msg.setConsensusType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainConfigHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCoinsRoot(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractsRoot(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessagesRoot(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionsRoot(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setPublishedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blocks.BlockConsensus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blocks.BlockConsensus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blocks.BlockConsensus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blocks.BlockConsensus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConsensusType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getChainConfigHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getCoinsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getContractsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMessagesRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getTransactionsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPublishedAt();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.blocks.BlockConsensus.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 block_height = 2;
 * @return {number}
 */
proto.blocks.BlockConsensus.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ConsensusType consensus_type = 3;
 * @return {!proto.blocks.ConsensusType}
 */
proto.blocks.BlockConsensus.prototype.getConsensusType = function() {
  return /** @type {!proto.blocks.ConsensusType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.blocks.ConsensusType} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setConsensusType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes chain_config_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockConsensus.prototype.getChainConfigHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes chain_config_hash = 4;
 * This is a type-conversion wrapper around `getChainConfigHash()`
 * @return {string}
 */
proto.blocks.BlockConsensus.prototype.getChainConfigHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainConfigHash()));
};


/**
 * optional bytes chain_config_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainConfigHash()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockConsensus.prototype.getChainConfigHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainConfigHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setChainConfigHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes coins_root = 5;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockConsensus.prototype.getCoinsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes coins_root = 5;
 * This is a type-conversion wrapper around `getCoinsRoot()`
 * @return {string}
 */
proto.blocks.BlockConsensus.prototype.getCoinsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCoinsRoot()));
};


/**
 * optional bytes coins_root = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCoinsRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockConsensus.prototype.getCoinsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCoinsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setCoinsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes contracts_root = 6;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockConsensus.prototype.getContractsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes contracts_root = 6;
 * This is a type-conversion wrapper around `getContractsRoot()`
 * @return {string}
 */
proto.blocks.BlockConsensus.prototype.getContractsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractsRoot()));
};


/**
 * optional bytes contracts_root = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractsRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockConsensus.prototype.getContractsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setContractsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes messages_root = 7;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockConsensus.prototype.getMessagesRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes messages_root = 7;
 * This is a type-conversion wrapper around `getMessagesRoot()`
 * @return {string}
 */
proto.blocks.BlockConsensus.prototype.getMessagesRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessagesRoot()));
};


/**
 * optional bytes messages_root = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessagesRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockConsensus.prototype.getMessagesRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessagesRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setMessagesRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes transactions_root = 8;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockConsensus.prototype.getTransactionsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes transactions_root = 8;
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {string}
 */
proto.blocks.BlockConsensus.prototype.getTransactionsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionsRoot()));
};


/**
 * optional bytes transactions_root = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockConsensus.prototype.getTransactionsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setTransactionsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes signature = 9;
 * @return {!(string|Uint8Array)}
 */
proto.blocks.BlockConsensus.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes signature = 9;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.blocks.BlockConsensus.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.blocks.BlockConsensus.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blocks.BlockConsensus.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blocks.BlockConsensus} returns this
*/
proto.blocks.BlockConsensus.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.BlockConsensus.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.Timestamp published_at = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blocks.BlockConsensus.prototype.getPublishedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blocks.BlockConsensus} returns this
*/
proto.blocks.BlockConsensus.prototype.setPublishedAt = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blocks.BlockConsensus} returns this
 */
proto.blocks.BlockConsensus.prototype.clearPublishedAt = function() {
  return this.setPublishedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blocks.BlockConsensus.prototype.hasPublishedAt = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.blocks.ConsensusType = {
  GENESIS: 0,
  POA_CONSENSUS: 1
};

goog.object.extend(exports, proto.blocks);
