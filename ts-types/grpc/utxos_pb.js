// source: utxos.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var pointers_pb = require('./pointers_pb.js');
goog.object.extend(proto, pointers_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.utxos.Utxo', null, global);
goog.exportSymbol('proto.utxos.Utxo.DataCase', null, global);
goog.exportSymbol('proto.utxos.UtxoCoin', null, global);
goog.exportSymbol('proto.utxos.UtxoContract', null, global);
goog.exportSymbol('proto.utxos.UtxoMessage', null, global);
goog.exportSymbol('proto.utxos.UtxoStatus', null, global);
goog.exportSymbol('proto.utxos.UtxoType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.utxos.Utxo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.utxos.Utxo.oneofGroups_);
};
goog.inherits(proto.utxos.Utxo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.utxos.Utxo.displayName = 'proto.utxos.Utxo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.utxos.UtxoCoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.utxos.UtxoCoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.utxos.UtxoCoin.displayName = 'proto.utxos.UtxoCoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.utxos.UtxoContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.utxos.UtxoContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.utxos.UtxoContract.displayName = 'proto.utxos.UtxoContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.utxos.UtxoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.utxos.UtxoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.utxos.UtxoMessage.displayName = 'proto.utxos.UtxoMessage';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.utxos.Utxo.oneofGroups_ = [[4,5,6]];

/**
 * @enum {number}
 */
proto.utxos.Utxo.DataCase = {
  DATA_NOT_SET: 0,
  COIN: 4,
  CONTRACT: 5,
  MESSAGE: 6
};

/**
 * @return {proto.utxos.Utxo.DataCase}
 */
proto.utxos.Utxo.prototype.getDataCase = function() {
  return /** @type {proto.utxos.Utxo.DataCase} */(jspb.Message.computeOneofCase(this, proto.utxos.Utxo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.utxos.Utxo.prototype.toObject = function(opt_includeInstance) {
  return proto.utxos.Utxo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.utxos.Utxo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.Utxo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pointer: (f = msg.getPointer()) && pointers_pb.UtxoPointer.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coin: (f = msg.getCoin()) && proto.utxos.UtxoCoin.toObject(includeInstance, f),
    contract: (f = msg.getContract()) && proto.utxos.UtxoContract.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.utxos.UtxoMessage.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && common_pb.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.utxos.Utxo}
 */
proto.utxos.Utxo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.utxos.Utxo;
  return proto.utxos.Utxo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.utxos.Utxo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.utxos.Utxo}
 */
proto.utxos.Utxo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.utxos.UtxoType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new pointers_pb.UtxoPointer;
      reader.readMessage(value,pointers_pb.UtxoPointer.deserializeBinaryFromReader);
      msg.setPointer(value);
      break;
    case 3:
      var value = /** @type {!proto.utxos.UtxoStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.utxos.UtxoCoin;
      reader.readMessage(value,proto.utxos.UtxoCoin.deserializeBinaryFromReader);
      msg.setCoin(value);
      break;
    case 5:
      var value = new proto.utxos.UtxoContract;
      reader.readMessage(value,proto.utxos.UtxoContract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 6:
      var value = new proto.utxos.UtxoMessage;
      reader.readMessage(value,proto.utxos.UtxoMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 7:
      var value = new common_pb.Metadata;
      reader.readMessage(value,common_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.utxos.Utxo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.utxos.Utxo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.utxos.Utxo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.Utxo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPointer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pointers_pb.UtxoPointer.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCoin();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.utxos.UtxoCoin.serializeBinaryToWriter
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.utxos.UtxoContract.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.utxos.UtxoMessage.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_pb.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional UtxoType type = 1;
 * @return {!proto.utxos.UtxoType}
 */
proto.utxos.Utxo.prototype.getType = function() {
  return /** @type {!proto.utxos.UtxoType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.utxos.UtxoType} value
 * @return {!proto.utxos.Utxo} returns this
 */
proto.utxos.Utxo.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional pointers.UtxoPointer pointer = 2;
 * @return {?proto.pointers.UtxoPointer}
 */
proto.utxos.Utxo.prototype.getPointer = function() {
  return /** @type{?proto.pointers.UtxoPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.UtxoPointer, 2));
};


/**
 * @param {?proto.pointers.UtxoPointer|undefined} value
 * @return {!proto.utxos.Utxo} returns this
*/
proto.utxos.Utxo.prototype.setPointer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.utxos.Utxo} returns this
 */
proto.utxos.Utxo.prototype.clearPointer = function() {
  return this.setPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.utxos.Utxo.prototype.hasPointer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UtxoStatus status = 3;
 * @return {!proto.utxos.UtxoStatus}
 */
proto.utxos.Utxo.prototype.getStatus = function() {
  return /** @type {!proto.utxos.UtxoStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.utxos.UtxoStatus} value
 * @return {!proto.utxos.Utxo} returns this
 */
proto.utxos.Utxo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional UtxoCoin coin = 4;
 * @return {?proto.utxos.UtxoCoin}
 */
proto.utxos.Utxo.prototype.getCoin = function() {
  return /** @type{?proto.utxos.UtxoCoin} */ (
    jspb.Message.getWrapperField(this, proto.utxos.UtxoCoin, 4));
};


/**
 * @param {?proto.utxos.UtxoCoin|undefined} value
 * @return {!proto.utxos.Utxo} returns this
*/
proto.utxos.Utxo.prototype.setCoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.utxos.Utxo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.utxos.Utxo} returns this
 */
proto.utxos.Utxo.prototype.clearCoin = function() {
  return this.setCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.utxos.Utxo.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UtxoContract contract = 5;
 * @return {?proto.utxos.UtxoContract}
 */
proto.utxos.Utxo.prototype.getContract = function() {
  return /** @type{?proto.utxos.UtxoContract} */ (
    jspb.Message.getWrapperField(this, proto.utxos.UtxoContract, 5));
};


/**
 * @param {?proto.utxos.UtxoContract|undefined} value
 * @return {!proto.utxos.Utxo} returns this
*/
proto.utxos.Utxo.prototype.setContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.utxos.Utxo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.utxos.Utxo} returns this
 */
proto.utxos.Utxo.prototype.clearContract = function() {
  return this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.utxos.Utxo.prototype.hasContract = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UtxoMessage message = 6;
 * @return {?proto.utxos.UtxoMessage}
 */
proto.utxos.Utxo.prototype.getMessage = function() {
  return /** @type{?proto.utxos.UtxoMessage} */ (
    jspb.Message.getWrapperField(this, proto.utxos.UtxoMessage, 6));
};


/**
 * @param {?proto.utxos.UtxoMessage|undefined} value
 * @return {!proto.utxos.Utxo} returns this
*/
proto.utxos.Utxo.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.utxos.Utxo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.utxos.Utxo} returns this
 */
proto.utxos.Utxo.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.utxos.Utxo.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional common.Metadata metadata = 7;
 * @return {?proto.common.Metadata}
 */
proto.utxos.Utxo.prototype.getMetadata = function() {
  return /** @type{?proto.common.Metadata} */ (
    jspb.Message.getWrapperField(this, common_pb.Metadata, 7));
};


/**
 * @param {?proto.common.Metadata|undefined} value
 * @return {!proto.utxos.Utxo} returns this
*/
proto.utxos.Utxo.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.utxos.Utxo} returns this
 */
proto.utxos.Utxo.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.utxos.Utxo.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.utxos.UtxoCoin.prototype.toObject = function(opt_includeInstance) {
  return proto.utxos.UtxoCoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.utxos.UtxoCoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.UtxoCoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.utxos.UtxoCoin}
 */
proto.utxos.UtxoCoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.utxos.UtxoCoin;
  return proto.utxos.UtxoCoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.utxos.UtxoCoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.utxos.UtxoCoin}
 */
proto.utxos.UtxoCoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.utxos.UtxoCoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.utxos.UtxoCoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.utxos.UtxoCoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.UtxoCoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 amount = 1;
 * @return {number}
 */
proto.utxos.UtxoCoin.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.utxos.UtxoCoin} returns this
 */
proto.utxos.UtxoCoin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.utxos.UtxoContract.prototype.toObject = function(opt_includeInstance) {
  return proto.utxos.UtxoContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.utxos.UtxoContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.UtxoContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.utxos.UtxoContract}
 */
proto.utxos.UtxoContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.utxos.UtxoContract;
  return proto.utxos.UtxoContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.utxos.UtxoContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.utxos.UtxoContract}
 */
proto.utxos.UtxoContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.utxos.UtxoContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.utxos.UtxoContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.utxos.UtxoContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.UtxoContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.utxos.UtxoContract.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.utxos.UtxoContract.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.utxos.UtxoContract.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.utxos.UtxoContract} returns this
 */
proto.utxos.UtxoContract.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.utxos.UtxoContract.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.utxos.UtxoContract.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.utxos.UtxoContract.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.utxos.UtxoContract} returns this
 */
proto.utxos.UtxoContract.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.utxos.UtxoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.utxos.UtxoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.utxos.UtxoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.UtxoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: msg.getSender_asB64(),
    recipient: msg.getRecipient_asB64(),
    nonce: msg.getNonce_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.utxos.UtxoMessage}
 */
proto.utxos.UtxoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.utxos.UtxoMessage;
  return proto.utxos.UtxoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.utxos.UtxoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.utxos.UtxoMessage}
 */
proto.utxos.UtxoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.utxos.UtxoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.utxos.UtxoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.utxos.UtxoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.utxos.UtxoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecipient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes sender = 1;
 * @return {!(string|Uint8Array)}
 */
proto.utxos.UtxoMessage.prototype.getSender = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sender = 1;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.utxos.UtxoMessage.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.utxos.UtxoMessage.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.utxos.UtxoMessage} returns this
 */
proto.utxos.UtxoMessage.prototype.setSender = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes recipient = 2;
 * @return {!(string|Uint8Array)}
 */
proto.utxos.UtxoMessage.prototype.getRecipient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes recipient = 2;
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {string}
 */
proto.utxos.UtxoMessage.prototype.getRecipient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipient()));
};


/**
 * optional bytes recipient = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {!Uint8Array}
 */
proto.utxos.UtxoMessage.prototype.getRecipient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.utxos.UtxoMessage} returns this
 */
proto.utxos.UtxoMessage.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes nonce = 3;
 * @return {!(string|Uint8Array)}
 */
proto.utxos.UtxoMessage.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes nonce = 3;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.utxos.UtxoMessage.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.utxos.UtxoMessage.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.utxos.UtxoMessage} returns this
 */
proto.utxos.UtxoMessage.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.utxos.UtxoMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.utxos.UtxoMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.utxos.UtxoMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.utxos.UtxoMessage} returns this
 */
proto.utxos.UtxoMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.utxos.UtxoStatus = {
  UNSPENT: 0,
  SPENT: 2
};

/**
 * @enum {number}
 */
proto.utxos.UtxoType = {
  UNKNOWN: 0,
  CONTRACT: 1,
  COIN: 2,
  MESSAGE: 3
};

goog.object.extend(exports, proto.utxos);
