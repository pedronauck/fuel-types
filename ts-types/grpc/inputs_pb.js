// source: inputs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var pointers_pb = require('./pointers_pb.js');
goog.object.extend(proto, pointers_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.inputs.Input', null, global);
goog.exportSymbol('proto.inputs.Input.InputCase', null, global);
goog.exportSymbol('proto.inputs.InputCoin', null, global);
goog.exportSymbol('proto.inputs.InputContract', null, global);
goog.exportSymbol('proto.inputs.InputMessage', null, global);
goog.exportSymbol('proto.inputs.InputType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inputs.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.inputs.Input.oneofGroups_);
};
goog.inherits(proto.inputs.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.inputs.Input.displayName = 'proto.inputs.Input';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inputs.InputCoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inputs.InputCoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.inputs.InputCoin.displayName = 'proto.inputs.InputCoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inputs.InputContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inputs.InputContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.inputs.InputContract.displayName = 'proto.inputs.InputContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.inputs.InputMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.inputs.InputMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.inputs.InputMessage.displayName = 'proto.inputs.InputMessage';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.inputs.Input.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.inputs.Input.InputCase = {
  INPUT_NOT_SET: 0,
  COIN: 3,
  CONTRACT: 4,
  MESSAGE: 5
};

/**
 * @return {proto.inputs.Input.InputCase}
 */
proto.inputs.Input.prototype.getInputCase = function() {
  return /** @type {proto.inputs.Input.InputCase} */(jspb.Message.computeOneofCase(this, proto.inputs.Input.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inputs.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.inputs.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inputs.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coin: (f = msg.getCoin()) && proto.inputs.InputCoin.toObject(includeInstance, f),
    contract: (f = msg.getContract()) && proto.inputs.InputContract.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.inputs.InputMessage.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && common_pb.Metadata.toObject(includeInstance, f),
    pointer: (f = msg.getPointer()) && pointers_pb.InputPointer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inputs.Input}
 */
proto.inputs.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inputs.Input;
  return proto.inputs.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inputs.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inputs.Input}
 */
proto.inputs.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {!proto.inputs.InputType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.inputs.InputCoin;
      reader.readMessage(value,proto.inputs.InputCoin.deserializeBinaryFromReader);
      msg.setCoin(value);
      break;
    case 4:
      var value = new proto.inputs.InputContract;
      reader.readMessage(value,proto.inputs.InputContract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 5:
      var value = new proto.inputs.InputMessage;
      reader.readMessage(value,proto.inputs.InputMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 7:
      var value = new common_pb.Metadata;
      reader.readMessage(value,common_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 8:
      var value = new pointers_pb.InputPointer;
      reader.readMessage(value,pointers_pb.InputPointer.deserializeBinaryFromReader);
      msg.setPointer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inputs.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inputs.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inputs.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCoin();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.inputs.InputCoin.serializeBinaryToWriter
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.inputs.InputContract.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.inputs.InputMessage.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_pb.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getPointer();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      pointers_pb.InputPointer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.inputs.Input.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.inputs.Input} returns this
 */
proto.inputs.Input.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InputType type = 2;
 * @return {!proto.inputs.InputType}
 */
proto.inputs.Input.prototype.getType = function() {
  return /** @type {!proto.inputs.InputType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.inputs.InputType} value
 * @return {!proto.inputs.Input} returns this
 */
proto.inputs.Input.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional InputCoin coin = 3;
 * @return {?proto.inputs.InputCoin}
 */
proto.inputs.Input.prototype.getCoin = function() {
  return /** @type{?proto.inputs.InputCoin} */ (
    jspb.Message.getWrapperField(this, proto.inputs.InputCoin, 3));
};


/**
 * @param {?proto.inputs.InputCoin|undefined} value
 * @return {!proto.inputs.Input} returns this
*/
proto.inputs.Input.prototype.setCoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.inputs.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.inputs.Input} returns this
 */
proto.inputs.Input.prototype.clearCoin = function() {
  return this.setCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.inputs.Input.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InputContract contract = 4;
 * @return {?proto.inputs.InputContract}
 */
proto.inputs.Input.prototype.getContract = function() {
  return /** @type{?proto.inputs.InputContract} */ (
    jspb.Message.getWrapperField(this, proto.inputs.InputContract, 4));
};


/**
 * @param {?proto.inputs.InputContract|undefined} value
 * @return {!proto.inputs.Input} returns this
*/
proto.inputs.Input.prototype.setContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.inputs.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.inputs.Input} returns this
 */
proto.inputs.Input.prototype.clearContract = function() {
  return this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.inputs.Input.prototype.hasContract = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InputMessage message = 5;
 * @return {?proto.inputs.InputMessage}
 */
proto.inputs.Input.prototype.getMessage = function() {
  return /** @type{?proto.inputs.InputMessage} */ (
    jspb.Message.getWrapperField(this, proto.inputs.InputMessage, 5));
};


/**
 * @param {?proto.inputs.InputMessage|undefined} value
 * @return {!proto.inputs.Input} returns this
*/
proto.inputs.Input.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.inputs.Input.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.inputs.Input} returns this
 */
proto.inputs.Input.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.inputs.Input.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional common.Metadata metadata = 7;
 * @return {?proto.common.Metadata}
 */
proto.inputs.Input.prototype.getMetadata = function() {
  return /** @type{?proto.common.Metadata} */ (
    jspb.Message.getWrapperField(this, common_pb.Metadata, 7));
};


/**
 * @param {?proto.common.Metadata|undefined} value
 * @return {!proto.inputs.Input} returns this
*/
proto.inputs.Input.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.inputs.Input} returns this
 */
proto.inputs.Input.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.inputs.Input.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional pointers.InputPointer pointer = 8;
 * @return {?proto.pointers.InputPointer}
 */
proto.inputs.Input.prototype.getPointer = function() {
  return /** @type{?proto.pointers.InputPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.InputPointer, 8));
};


/**
 * @param {?proto.pointers.InputPointer|undefined} value
 * @return {!proto.inputs.Input} returns this
*/
proto.inputs.Input.prototype.setPointer = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.inputs.Input} returns this
 */
proto.inputs.Input.prototype.clearPointer = function() {
  return this.setPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.inputs.Input.prototype.hasPointer = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inputs.InputCoin.prototype.toObject = function(opt_includeInstance) {
  return proto.inputs.InputCoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inputs.InputCoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.InputCoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    utxoId: msg.getUtxoId_asB64(),
    owner: msg.getOwner_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    assetId: msg.getAssetId_asB64(),
    txPointer: (f = msg.getTxPointer()) && pointers_pb.TxPointer.toObject(includeInstance, f),
    witnessIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    predicateGasUsed: jspb.Message.getFieldWithDefault(msg, 7, 0),
    predicate: msg.getPredicate_asB64(),
    predicateData: msg.getPredicateData_asB64(),
    predicateLength: jspb.Message.getFieldWithDefault(msg, 10, 0),
    predicateDataLength: jspb.Message.getFieldWithDefault(msg, 11, 0),
    outputIndex: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inputs.InputCoin}
 */
proto.inputs.InputCoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inputs.InputCoin;
  return proto.inputs.InputCoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inputs.InputCoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inputs.InputCoin}
 */
proto.inputs.InputCoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUtxoId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    case 5:
      var value = new pointers_pb.TxPointer;
      reader.readMessage(value,pointers_pb.TxPointer.deserializeBinaryFromReader);
      msg.setTxPointer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWitnessIndex(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPredicateGasUsed(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPredicate(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPredicateData(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPredicateLength(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPredicateDataLength(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inputs.InputCoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inputs.InputCoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inputs.InputCoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.InputCoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUtxoId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOwner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTxPointer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      pointers_pb.TxPointer.serializeBinaryToWriter
    );
  }
  f = message.getWitnessIndex();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPredicateGasUsed();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPredicate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getPredicateData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getPredicateLength();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getPredicateDataLength();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional bytes utxo_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputCoin.prototype.getUtxoId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes utxo_id = 1;
 * This is a type-conversion wrapper around `getUtxoId()`
 * @return {string}
 */
proto.inputs.InputCoin.prototype.getUtxoId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUtxoId()));
};


/**
 * optional bytes utxo_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUtxoId()`
 * @return {!Uint8Array}
 */
proto.inputs.InputCoin.prototype.getUtxoId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUtxoId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setUtxoId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes owner = 2;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputCoin.prototype.getOwner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes owner = 2;
 * This is a type-conversion wrapper around `getOwner()`
 * @return {string}
 */
proto.inputs.InputCoin.prototype.getOwner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwner()));
};


/**
 * optional bytes owner = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwner()`
 * @return {!Uint8Array}
 */
proto.inputs.InputCoin.prototype.getOwner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setOwner = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.inputs.InputCoin.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes asset_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputCoin.prototype.getAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes asset_id = 4;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.inputs.InputCoin.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.inputs.InputCoin.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional pointers.TxPointer tx_pointer = 5;
 * @return {?proto.pointers.TxPointer}
 */
proto.inputs.InputCoin.prototype.getTxPointer = function() {
  return /** @type{?proto.pointers.TxPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.TxPointer, 5));
};


/**
 * @param {?proto.pointers.TxPointer|undefined} value
 * @return {!proto.inputs.InputCoin} returns this
*/
proto.inputs.InputCoin.prototype.setTxPointer = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.clearTxPointer = function() {
  return this.setTxPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.inputs.InputCoin.prototype.hasTxPointer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 witness_index = 6;
 * @return {number}
 */
proto.inputs.InputCoin.prototype.getWitnessIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setWitnessIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 predicate_gas_used = 7;
 * @return {number}
 */
proto.inputs.InputCoin.prototype.getPredicateGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setPredicateGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes predicate = 8;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputCoin.prototype.getPredicate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes predicate = 8;
 * This is a type-conversion wrapper around `getPredicate()`
 * @return {string}
 */
proto.inputs.InputCoin.prototype.getPredicate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPredicate()));
};


/**
 * optional bytes predicate = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPredicate()`
 * @return {!Uint8Array}
 */
proto.inputs.InputCoin.prototype.getPredicate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPredicate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setPredicate = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes predicate_data = 9;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputCoin.prototype.getPredicateData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes predicate_data = 9;
 * This is a type-conversion wrapper around `getPredicateData()`
 * @return {string}
 */
proto.inputs.InputCoin.prototype.getPredicateData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPredicateData()));
};


/**
 * optional bytes predicate_data = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPredicateData()`
 * @return {!Uint8Array}
 */
proto.inputs.InputCoin.prototype.getPredicateData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPredicateData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setPredicateData = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int64 predicate_length = 10;
 * @return {number}
 */
proto.inputs.InputCoin.prototype.getPredicateLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setPredicateLength = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 predicate_data_length = 11;
 * @return {number}
 */
proto.inputs.InputCoin.prototype.getPredicateDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setPredicateDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 output_index = 12;
 * @return {number}
 */
proto.inputs.InputCoin.prototype.getOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputCoin} returns this
 */
proto.inputs.InputCoin.prototype.setOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inputs.InputContract.prototype.toObject = function(opt_includeInstance) {
  return proto.inputs.InputContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inputs.InputContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.InputContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    utxoId: msg.getUtxoId_asB64(),
    balanceRoot: msg.getBalanceRoot_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    txPointer: (f = msg.getTxPointer()) && pointers_pb.TxPointer.toObject(includeInstance, f),
    contractId: msg.getContractId_asB64(),
    outputIndex: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inputs.InputContract}
 */
proto.inputs.InputContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inputs.InputContract;
  return proto.inputs.InputContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inputs.InputContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inputs.InputContract}
 */
proto.inputs.InputContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUtxoId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalanceRoot(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 4:
      var value = new pointers_pb.TxPointer;
      reader.readMessage(value,pointers_pb.TxPointer.deserializeBinaryFromReader);
      msg.setTxPointer(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inputs.InputContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inputs.InputContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inputs.InputContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.InputContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUtxoId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBalanceRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTxPointer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      pointers_pb.TxPointer.serializeBinaryToWriter
    );
  }
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional bytes utxo_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputContract.prototype.getUtxoId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes utxo_id = 1;
 * This is a type-conversion wrapper around `getUtxoId()`
 * @return {string}
 */
proto.inputs.InputContract.prototype.getUtxoId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUtxoId()));
};


/**
 * optional bytes utxo_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUtxoId()`
 * @return {!Uint8Array}
 */
proto.inputs.InputContract.prototype.getUtxoId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUtxoId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputContract} returns this
 */
proto.inputs.InputContract.prototype.setUtxoId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes balance_root = 2;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputContract.prototype.getBalanceRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes balance_root = 2;
 * This is a type-conversion wrapper around `getBalanceRoot()`
 * @return {string}
 */
proto.inputs.InputContract.prototype.getBalanceRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalanceRoot()));
};


/**
 * optional bytes balance_root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalanceRoot()`
 * @return {!Uint8Array}
 */
proto.inputs.InputContract.prototype.getBalanceRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalanceRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputContract} returns this
 */
proto.inputs.InputContract.prototype.setBalanceRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes state_root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputContract.prototype.getStateRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes state_root = 3;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.inputs.InputContract.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.inputs.InputContract.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputContract} returns this
 */
proto.inputs.InputContract.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional pointers.TxPointer tx_pointer = 4;
 * @return {?proto.pointers.TxPointer}
 */
proto.inputs.InputContract.prototype.getTxPointer = function() {
  return /** @type{?proto.pointers.TxPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.TxPointer, 4));
};


/**
 * @param {?proto.pointers.TxPointer|undefined} value
 * @return {!proto.inputs.InputContract} returns this
*/
proto.inputs.InputContract.prototype.setTxPointer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.inputs.InputContract} returns this
 */
proto.inputs.InputContract.prototype.clearTxPointer = function() {
  return this.setTxPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.inputs.InputContract.prototype.hasTxPointer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes contract_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputContract.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes contract_id = 5;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.inputs.InputContract.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.inputs.InputContract.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputContract} returns this
 */
proto.inputs.InputContract.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int32 output_index = 6;
 * @return {number}
 */
proto.inputs.InputContract.prototype.getOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputContract} returns this
 */
proto.inputs.InputContract.prototype.setOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.inputs.InputMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.inputs.InputMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.inputs.InputMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.InputMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: msg.getSender_asB64(),
    recipient: msg.getRecipient_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nonce: msg.getNonce_asB64(),
    witnessIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    predicateGasUsed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    data: msg.getData_asB64(),
    predicate: msg.getPredicate_asB64(),
    predicateData: msg.getPredicateData_asB64(),
    dataLength: jspb.Message.getFieldWithDefault(msg, 10, 0),
    predicateLength: jspb.Message.getFieldWithDefault(msg, 11, 0),
    predicateDataLength: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.inputs.InputMessage}
 */
proto.inputs.InputMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.inputs.InputMessage;
  return proto.inputs.InputMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.inputs.InputMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.inputs.InputMessage}
 */
proto.inputs.InputMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWitnessIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPredicateGasUsed(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPredicate(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPredicateData(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDataLength(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPredicateLength(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPredicateDataLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.inputs.InputMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.inputs.InputMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.inputs.InputMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.inputs.InputMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecipient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getWitnessIndex();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPredicateGasUsed();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getPredicate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getPredicateData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getDataLength();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPredicateLength();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getPredicateDataLength();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional bytes sender = 1;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputMessage.prototype.getSender = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sender = 1;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.inputs.InputMessage.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.inputs.InputMessage.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setSender = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes recipient = 2;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputMessage.prototype.getRecipient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes recipient = 2;
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {string}
 */
proto.inputs.InputMessage.prototype.getRecipient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipient()));
};


/**
 * optional bytes recipient = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {!Uint8Array}
 */
proto.inputs.InputMessage.prototype.getRecipient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.inputs.InputMessage.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputMessage.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.inputs.InputMessage.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.inputs.InputMessage.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int32 witness_index = 5;
 * @return {number}
 */
proto.inputs.InputMessage.prototype.getWitnessIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setWitnessIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 predicate_gas_used = 6;
 * @return {number}
 */
proto.inputs.InputMessage.prototype.getPredicateGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setPredicateGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes data = 7;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.inputs.InputMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.inputs.InputMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes predicate = 8;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputMessage.prototype.getPredicate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes predicate = 8;
 * This is a type-conversion wrapper around `getPredicate()`
 * @return {string}
 */
proto.inputs.InputMessage.prototype.getPredicate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPredicate()));
};


/**
 * optional bytes predicate = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPredicate()`
 * @return {!Uint8Array}
 */
proto.inputs.InputMessage.prototype.getPredicate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPredicate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setPredicate = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes predicate_data = 9;
 * @return {!(string|Uint8Array)}
 */
proto.inputs.InputMessage.prototype.getPredicateData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes predicate_data = 9;
 * This is a type-conversion wrapper around `getPredicateData()`
 * @return {string}
 */
proto.inputs.InputMessage.prototype.getPredicateData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPredicateData()));
};


/**
 * optional bytes predicate_data = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPredicateData()`
 * @return {!Uint8Array}
 */
proto.inputs.InputMessage.prototype.getPredicateData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPredicateData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setPredicateData = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int32 data_length = 10;
 * @return {number}
 */
proto.inputs.InputMessage.prototype.getDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 predicate_length = 11;
 * @return {number}
 */
proto.inputs.InputMessage.prototype.getPredicateLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setPredicateLength = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 predicate_data_length = 12;
 * @return {number}
 */
proto.inputs.InputMessage.prototype.getPredicateDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.inputs.InputMessage} returns this
 */
proto.inputs.InputMessage.prototype.setPredicateDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * @enum {number}
 */
proto.inputs.InputType = {
  UNKNOWN_INPUT_TYPE: 0,
  CONTRACT: 1,
  COIN: 2,
  MESSAGE: 3
};

goog.object.extend(exports, proto.inputs);
