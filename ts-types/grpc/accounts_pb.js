// source: accounts.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var pointers_pb = require('./pointers_pb.js');
goog.object.extend(proto, pointers_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.accounts.AccountType', null, global);
goog.exportSymbol('proto.accounts.Contract', null, global);
goog.exportSymbol('proto.accounts.ContractData', null, global);
goog.exportSymbol('proto.accounts.Predicate', null, global);
goog.exportSymbol('proto.accounts.PredicateData', null, global);
goog.exportSymbol('proto.accounts.Script', null, global);
goog.exportSymbol('proto.accounts.ScriptData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.accounts.Predicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.accounts.Predicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.accounts.Predicate.displayName = 'proto.accounts.Predicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.accounts.PredicateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.accounts.PredicateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.accounts.PredicateData.displayName = 'proto.accounts.PredicateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.accounts.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.accounts.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.accounts.Contract.displayName = 'proto.accounts.Contract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.accounts.ContractData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.accounts.ContractData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.accounts.ContractData.displayName = 'proto.accounts.ContractData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.accounts.Script = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.accounts.Script, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.accounts.Script.displayName = 'proto.accounts.Script';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.accounts.ScriptData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.accounts.ScriptData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.accounts.ScriptData.displayName = 'proto.accounts.ScriptData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.accounts.Predicate.prototype.toObject = function(opt_includeInstance) {
  return proto.accounts.Predicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.accounts.Predicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.Predicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pointer: (f = msg.getPointer()) && pointers_pb.PredicatePointer.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.accounts.PredicateData.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && common_pb.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.accounts.Predicate}
 */
proto.accounts.Predicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.accounts.Predicate;
  return proto.accounts.Predicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.accounts.Predicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.accounts.Predicate}
 */
proto.accounts.Predicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.accounts.AccountType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new pointers_pb.PredicatePointer;
      reader.readMessage(value,pointers_pb.PredicatePointer.deserializeBinaryFromReader);
      msg.setPointer(value);
      break;
    case 3:
      var value = new proto.accounts.PredicateData;
      reader.readMessage(value,proto.accounts.PredicateData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new common_pb.Metadata;
      reader.readMessage(value,common_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.accounts.Predicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.accounts.Predicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.accounts.Predicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.Predicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPointer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pointers_pb.PredicatePointer.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.accounts.PredicateData.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountType type = 1;
 * @return {!proto.accounts.AccountType}
 */
proto.accounts.Predicate.prototype.getType = function() {
  return /** @type {!proto.accounts.AccountType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.accounts.AccountType} value
 * @return {!proto.accounts.Predicate} returns this
 */
proto.accounts.Predicate.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional pointers.PredicatePointer pointer = 2;
 * @return {?proto.pointers.PredicatePointer}
 */
proto.accounts.Predicate.prototype.getPointer = function() {
  return /** @type{?proto.pointers.PredicatePointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.PredicatePointer, 2));
};


/**
 * @param {?proto.pointers.PredicatePointer|undefined} value
 * @return {!proto.accounts.Predicate} returns this
*/
proto.accounts.Predicate.prototype.setPointer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Predicate} returns this
 */
proto.accounts.Predicate.prototype.clearPointer = function() {
  return this.setPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Predicate.prototype.hasPointer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PredicateData data = 3;
 * @return {?proto.accounts.PredicateData}
 */
proto.accounts.Predicate.prototype.getData = function() {
  return /** @type{?proto.accounts.PredicateData} */ (
    jspb.Message.getWrapperField(this, proto.accounts.PredicateData, 3));
};


/**
 * @param {?proto.accounts.PredicateData|undefined} value
 * @return {!proto.accounts.Predicate} returns this
*/
proto.accounts.Predicate.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Predicate} returns this
 */
proto.accounts.Predicate.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Predicate.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional common.Metadata metadata = 4;
 * @return {?proto.common.Metadata}
 */
proto.accounts.Predicate.prototype.getMetadata = function() {
  return /** @type{?proto.common.Metadata} */ (
    jspb.Message.getWrapperField(this, common_pb.Metadata, 4));
};


/**
 * @param {?proto.common.Metadata|undefined} value
 * @return {!proto.accounts.Predicate} returns this
*/
proto.accounts.Predicate.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Predicate} returns this
 */
proto.accounts.Predicate.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Predicate.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.accounts.PredicateData.prototype.toObject = function(opt_includeInstance) {
  return proto.accounts.PredicateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.accounts.PredicateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.PredicateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytecode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.accounts.PredicateData}
 */
proto.accounts.PredicateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.accounts.PredicateData;
  return proto.accounts.PredicateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.accounts.PredicateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.accounts.PredicateData}
 */
proto.accounts.PredicateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBytecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.accounts.PredicateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.accounts.PredicateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.accounts.PredicateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.PredicateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytecode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bytecode = 1;
 * @return {string}
 */
proto.accounts.PredicateData.prototype.getBytecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.accounts.PredicateData} returns this
 */
proto.accounts.PredicateData.prototype.setBytecode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.accounts.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.accounts.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.accounts.Contract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pointer: (f = msg.getPointer()) && pointers_pb.ContractPointer.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.accounts.ContractData.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && common_pb.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.accounts.Contract}
 */
proto.accounts.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.accounts.Contract;
  return proto.accounts.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.accounts.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.accounts.Contract}
 */
proto.accounts.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.accounts.AccountType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new pointers_pb.ContractPointer;
      reader.readMessage(value,pointers_pb.ContractPointer.deserializeBinaryFromReader);
      msg.setPointer(value);
      break;
    case 3:
      var value = new proto.accounts.ContractData;
      reader.readMessage(value,proto.accounts.ContractData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new common_pb.Metadata;
      reader.readMessage(value,common_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.accounts.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.accounts.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.accounts.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPointer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pointers_pb.ContractPointer.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.accounts.ContractData.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountType type = 1;
 * @return {!proto.accounts.AccountType}
 */
proto.accounts.Contract.prototype.getType = function() {
  return /** @type {!proto.accounts.AccountType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.accounts.AccountType} value
 * @return {!proto.accounts.Contract} returns this
 */
proto.accounts.Contract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional pointers.ContractPointer pointer = 2;
 * @return {?proto.pointers.ContractPointer}
 */
proto.accounts.Contract.prototype.getPointer = function() {
  return /** @type{?proto.pointers.ContractPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.ContractPointer, 2));
};


/**
 * @param {?proto.pointers.ContractPointer|undefined} value
 * @return {!proto.accounts.Contract} returns this
*/
proto.accounts.Contract.prototype.setPointer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Contract} returns this
 */
proto.accounts.Contract.prototype.clearPointer = function() {
  return this.setPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Contract.prototype.hasPointer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ContractData data = 3;
 * @return {?proto.accounts.ContractData}
 */
proto.accounts.Contract.prototype.getData = function() {
  return /** @type{?proto.accounts.ContractData} */ (
    jspb.Message.getWrapperField(this, proto.accounts.ContractData, 3));
};


/**
 * @param {?proto.accounts.ContractData|undefined} value
 * @return {!proto.accounts.Contract} returns this
*/
proto.accounts.Contract.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Contract} returns this
 */
proto.accounts.Contract.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Contract.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional common.Metadata metadata = 4;
 * @return {?proto.common.Metadata}
 */
proto.accounts.Contract.prototype.getMetadata = function() {
  return /** @type{?proto.common.Metadata} */ (
    jspb.Message.getWrapperField(this, common_pb.Metadata, 4));
};


/**
 * @param {?proto.common.Metadata|undefined} value
 * @return {!proto.accounts.Contract} returns this
*/
proto.accounts.Contract.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Contract} returns this
 */
proto.accounts.Contract.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Contract.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.accounts.ContractData.prototype.toObject = function(opt_includeInstance) {
  return proto.accounts.ContractData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.accounts.ContractData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.ContractData.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytecode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    abi: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.accounts.ContractData}
 */
proto.accounts.ContractData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.accounts.ContractData;
  return proto.accounts.ContractData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.accounts.ContractData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.accounts.ContractData}
 */
proto.accounts.ContractData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBytecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.accounts.ContractData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.accounts.ContractData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.accounts.ContractData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.ContractData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytecode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAbi();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bytecode = 1;
 * @return {string}
 */
proto.accounts.ContractData.prototype.getBytecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.accounts.ContractData} returns this
 */
proto.accounts.ContractData.prototype.setBytecode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string abi = 2;
 * @return {string}
 */
proto.accounts.ContractData.prototype.getAbi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.accounts.ContractData} returns this
 */
proto.accounts.ContractData.prototype.setAbi = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.accounts.Script.prototype.toObject = function(opt_includeInstance) {
  return proto.accounts.Script.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.accounts.Script} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.Script.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pointer: (f = msg.getPointer()) && pointers_pb.ScriptPointer.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.accounts.ScriptData.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && common_pb.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.accounts.Script}
 */
proto.accounts.Script.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.accounts.Script;
  return proto.accounts.Script.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.accounts.Script} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.accounts.Script}
 */
proto.accounts.Script.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.accounts.AccountType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new pointers_pb.ScriptPointer;
      reader.readMessage(value,pointers_pb.ScriptPointer.deserializeBinaryFromReader);
      msg.setPointer(value);
      break;
    case 3:
      var value = new proto.accounts.ScriptData;
      reader.readMessage(value,proto.accounts.ScriptData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new common_pb.Metadata;
      reader.readMessage(value,common_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.accounts.Script.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.accounts.Script.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.accounts.Script} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.Script.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPointer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pointers_pb.ScriptPointer.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.accounts.ScriptData.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountType type = 1;
 * @return {!proto.accounts.AccountType}
 */
proto.accounts.Script.prototype.getType = function() {
  return /** @type {!proto.accounts.AccountType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.accounts.AccountType} value
 * @return {!proto.accounts.Script} returns this
 */
proto.accounts.Script.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional pointers.ScriptPointer pointer = 2;
 * @return {?proto.pointers.ScriptPointer}
 */
proto.accounts.Script.prototype.getPointer = function() {
  return /** @type{?proto.pointers.ScriptPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.ScriptPointer, 2));
};


/**
 * @param {?proto.pointers.ScriptPointer|undefined} value
 * @return {!proto.accounts.Script} returns this
*/
proto.accounts.Script.prototype.setPointer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Script} returns this
 */
proto.accounts.Script.prototype.clearPointer = function() {
  return this.setPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Script.prototype.hasPointer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ScriptData data = 3;
 * @return {?proto.accounts.ScriptData}
 */
proto.accounts.Script.prototype.getData = function() {
  return /** @type{?proto.accounts.ScriptData} */ (
    jspb.Message.getWrapperField(this, proto.accounts.ScriptData, 3));
};


/**
 * @param {?proto.accounts.ScriptData|undefined} value
 * @return {!proto.accounts.Script} returns this
*/
proto.accounts.Script.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Script} returns this
 */
proto.accounts.Script.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Script.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional common.Metadata metadata = 4;
 * @return {?proto.common.Metadata}
 */
proto.accounts.Script.prototype.getMetadata = function() {
  return /** @type{?proto.common.Metadata} */ (
    jspb.Message.getWrapperField(this, common_pb.Metadata, 4));
};


/**
 * @param {?proto.common.Metadata|undefined} value
 * @return {!proto.accounts.Script} returns this
*/
proto.accounts.Script.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.accounts.Script} returns this
 */
proto.accounts.Script.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.accounts.Script.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.accounts.ScriptData.prototype.toObject = function(opt_includeInstance) {
  return proto.accounts.ScriptData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.accounts.ScriptData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.ScriptData.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytecode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.accounts.ScriptData}
 */
proto.accounts.ScriptData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.accounts.ScriptData;
  return proto.accounts.ScriptData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.accounts.ScriptData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.accounts.ScriptData}
 */
proto.accounts.ScriptData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBytecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.accounts.ScriptData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.accounts.ScriptData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.accounts.ScriptData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.accounts.ScriptData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytecode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bytecode = 1;
 * @return {string}
 */
proto.accounts.ScriptData.prototype.getBytecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.accounts.ScriptData} returns this
 */
proto.accounts.ScriptData.prototype.setBytecode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.accounts.AccountType = {
  UNKNOWN_ACCOUNT_TYPE: 0,
  PREDICATE: 1,
  CONTRACT: 2,
  SCRIPT: 3
};

goog.object.extend(exports, proto.accounts);
