// source: outputs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var pointers_pb = require('./pointers_pb.js');
goog.object.extend(proto, pointers_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.outputs.Output', null, global);
goog.exportSymbol('proto.outputs.Output.OutputCase', null, global);
goog.exportSymbol('proto.outputs.OutputChange', null, global);
goog.exportSymbol('proto.outputs.OutputCoin', null, global);
goog.exportSymbol('proto.outputs.OutputContract', null, global);
goog.exportSymbol('proto.outputs.OutputContractCreated', null, global);
goog.exportSymbol('proto.outputs.OutputType', null, global);
goog.exportSymbol('proto.outputs.OutputVariable', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.outputs.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.outputs.Output.oneofGroups_);
};
goog.inherits(proto.outputs.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.outputs.Output.displayName = 'proto.outputs.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.outputs.OutputCoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.outputs.OutputCoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.outputs.OutputCoin.displayName = 'proto.outputs.OutputCoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.outputs.OutputContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.outputs.OutputContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.outputs.OutputContract.displayName = 'proto.outputs.OutputContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.outputs.OutputContractCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.outputs.OutputContractCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.outputs.OutputContractCreated.displayName = 'proto.outputs.OutputContractCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.outputs.OutputChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.outputs.OutputChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.outputs.OutputChange.displayName = 'proto.outputs.OutputChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.outputs.OutputVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.outputs.OutputVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.outputs.OutputVariable.displayName = 'proto.outputs.OutputVariable';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.outputs.Output.oneofGroups_ = [[3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.outputs.Output.OutputCase = {
  OUTPUT_NOT_SET: 0,
  COIN: 3,
  CONTRACT: 4,
  CHANGE: 5,
  VARIABLE: 6,
  CONTRACT_CREATED: 7
};

/**
 * @return {proto.outputs.Output.OutputCase}
 */
proto.outputs.Output.prototype.getOutputCase = function() {
  return /** @type {proto.outputs.Output.OutputCase} */(jspb.Message.computeOneofCase(this, proto.outputs.Output.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.outputs.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.outputs.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.outputs.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coin: (f = msg.getCoin()) && proto.outputs.OutputCoin.toObject(includeInstance, f),
    contract: (f = msg.getContract()) && proto.outputs.OutputContract.toObject(includeInstance, f),
    change: (f = msg.getChange()) && proto.outputs.OutputChange.toObject(includeInstance, f),
    variable: (f = msg.getVariable()) && proto.outputs.OutputVariable.toObject(includeInstance, f),
    contractCreated: (f = msg.getContractCreated()) && proto.outputs.OutputContractCreated.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && common_pb.Metadata.toObject(includeInstance, f),
    pointer: (f = msg.getPointer()) && pointers_pb.OutputPointer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.outputs.Output}
 */
proto.outputs.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.outputs.Output;
  return proto.outputs.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.outputs.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.outputs.Output}
 */
proto.outputs.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {!proto.outputs.OutputType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.outputs.OutputCoin;
      reader.readMessage(value,proto.outputs.OutputCoin.deserializeBinaryFromReader);
      msg.setCoin(value);
      break;
    case 4:
      var value = new proto.outputs.OutputContract;
      reader.readMessage(value,proto.outputs.OutputContract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 5:
      var value = new proto.outputs.OutputChange;
      reader.readMessage(value,proto.outputs.OutputChange.deserializeBinaryFromReader);
      msg.setChange(value);
      break;
    case 6:
      var value = new proto.outputs.OutputVariable;
      reader.readMessage(value,proto.outputs.OutputVariable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 7:
      var value = new proto.outputs.OutputContractCreated;
      reader.readMessage(value,proto.outputs.OutputContractCreated.deserializeBinaryFromReader);
      msg.setContractCreated(value);
      break;
    case 9:
      var value = new common_pb.Metadata;
      reader.readMessage(value,common_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 10:
      var value = new pointers_pb.OutputPointer;
      reader.readMessage(value,pointers_pb.OutputPointer.deserializeBinaryFromReader);
      msg.setPointer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.outputs.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.outputs.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.outputs.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCoin();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.outputs.OutputCoin.serializeBinaryToWriter
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.outputs.OutputContract.serializeBinaryToWriter
    );
  }
  f = message.getChange();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.outputs.OutputChange.serializeBinaryToWriter
    );
  }
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.outputs.OutputVariable.serializeBinaryToWriter
    );
  }
  f = message.getContractCreated();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.outputs.OutputContractCreated.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      common_pb.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getPointer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      pointers_pb.OutputPointer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.outputs.Output.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OutputType type = 2;
 * @return {!proto.outputs.OutputType}
 */
proto.outputs.Output.prototype.getType = function() {
  return /** @type {!proto.outputs.OutputType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.outputs.OutputType} value
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional OutputCoin coin = 3;
 * @return {?proto.outputs.OutputCoin}
 */
proto.outputs.Output.prototype.getCoin = function() {
  return /** @type{?proto.outputs.OutputCoin} */ (
    jspb.Message.getWrapperField(this, proto.outputs.OutputCoin, 3));
};


/**
 * @param {?proto.outputs.OutputCoin|undefined} value
 * @return {!proto.outputs.Output} returns this
*/
proto.outputs.Output.prototype.setCoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.outputs.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.clearCoin = function() {
  return this.setCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.outputs.Output.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OutputContract contract = 4;
 * @return {?proto.outputs.OutputContract}
 */
proto.outputs.Output.prototype.getContract = function() {
  return /** @type{?proto.outputs.OutputContract} */ (
    jspb.Message.getWrapperField(this, proto.outputs.OutputContract, 4));
};


/**
 * @param {?proto.outputs.OutputContract|undefined} value
 * @return {!proto.outputs.Output} returns this
*/
proto.outputs.Output.prototype.setContract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.outputs.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.clearContract = function() {
  return this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.outputs.Output.prototype.hasContract = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OutputChange change = 5;
 * @return {?proto.outputs.OutputChange}
 */
proto.outputs.Output.prototype.getChange = function() {
  return /** @type{?proto.outputs.OutputChange} */ (
    jspb.Message.getWrapperField(this, proto.outputs.OutputChange, 5));
};


/**
 * @param {?proto.outputs.OutputChange|undefined} value
 * @return {!proto.outputs.Output} returns this
*/
proto.outputs.Output.prototype.setChange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.outputs.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.clearChange = function() {
  return this.setChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.outputs.Output.prototype.hasChange = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OutputVariable variable = 6;
 * @return {?proto.outputs.OutputVariable}
 */
proto.outputs.Output.prototype.getVariable = function() {
  return /** @type{?proto.outputs.OutputVariable} */ (
    jspb.Message.getWrapperField(this, proto.outputs.OutputVariable, 6));
};


/**
 * @param {?proto.outputs.OutputVariable|undefined} value
 * @return {!proto.outputs.Output} returns this
*/
proto.outputs.Output.prototype.setVariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.outputs.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.outputs.Output.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OutputContractCreated contract_created = 7;
 * @return {?proto.outputs.OutputContractCreated}
 */
proto.outputs.Output.prototype.getContractCreated = function() {
  return /** @type{?proto.outputs.OutputContractCreated} */ (
    jspb.Message.getWrapperField(this, proto.outputs.OutputContractCreated, 7));
};


/**
 * @param {?proto.outputs.OutputContractCreated|undefined} value
 * @return {!proto.outputs.Output} returns this
*/
proto.outputs.Output.prototype.setContractCreated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.outputs.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.clearContractCreated = function() {
  return this.setContractCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.outputs.Output.prototype.hasContractCreated = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional common.Metadata metadata = 9;
 * @return {?proto.common.Metadata}
 */
proto.outputs.Output.prototype.getMetadata = function() {
  return /** @type{?proto.common.Metadata} */ (
    jspb.Message.getWrapperField(this, common_pb.Metadata, 9));
};


/**
 * @param {?proto.common.Metadata|undefined} value
 * @return {!proto.outputs.Output} returns this
*/
proto.outputs.Output.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.outputs.Output.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional pointers.OutputPointer pointer = 10;
 * @return {?proto.pointers.OutputPointer}
 */
proto.outputs.Output.prototype.getPointer = function() {
  return /** @type{?proto.pointers.OutputPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.OutputPointer, 10));
};


/**
 * @param {?proto.pointers.OutputPointer|undefined} value
 * @return {!proto.outputs.Output} returns this
*/
proto.outputs.Output.prototype.setPointer = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.outputs.Output} returns this
 */
proto.outputs.Output.prototype.clearPointer = function() {
  return this.setPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.outputs.Output.prototype.hasPointer = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.outputs.OutputCoin.prototype.toObject = function(opt_includeInstance) {
  return proto.outputs.OutputCoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.outputs.OutputCoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputCoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: msg.getTo_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assetId: msg.getAssetId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.outputs.OutputCoin}
 */
proto.outputs.OutputCoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.outputs.OutputCoin;
  return proto.outputs.OutputCoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.outputs.OutputCoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.outputs.OutputCoin}
 */
proto.outputs.OutputCoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.outputs.OutputCoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.outputs.OutputCoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.outputs.OutputCoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputCoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputCoin.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to = 1;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.outputs.OutputCoin.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputCoin.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputCoin} returns this
 */
proto.outputs.OutputCoin.prototype.setTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.outputs.OutputCoin.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.outputs.OutputCoin} returns this
 */
proto.outputs.OutputCoin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes asset_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputCoin.prototype.getAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes asset_id = 3;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.outputs.OutputCoin.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputCoin.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputCoin} returns this
 */
proto.outputs.OutputCoin.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.outputs.OutputContract.prototype.toObject = function(opt_includeInstance) {
  return proto.outputs.OutputContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.outputs.OutputContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    balanceRoot: msg.getBalanceRoot_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    inputIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.outputs.OutputContract}
 */
proto.outputs.OutputContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.outputs.OutputContract;
  return proto.outputs.OutputContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.outputs.OutputContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.outputs.OutputContract}
 */
proto.outputs.OutputContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalanceRoot(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.outputs.OutputContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.outputs.OutputContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.outputs.OutputContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalanceRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getInputIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes balance_root = 1;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputContract.prototype.getBalanceRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes balance_root = 1;
 * This is a type-conversion wrapper around `getBalanceRoot()`
 * @return {string}
 */
proto.outputs.OutputContract.prototype.getBalanceRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalanceRoot()));
};


/**
 * optional bytes balance_root = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalanceRoot()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputContract.prototype.getBalanceRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalanceRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputContract} returns this
 */
proto.outputs.OutputContract.prototype.setBalanceRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes state_root = 2;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputContract.prototype.getStateRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes state_root = 2;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.outputs.OutputContract.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputContract.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputContract} returns this
 */
proto.outputs.OutputContract.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 input_index = 3;
 * @return {number}
 */
proto.outputs.OutputContract.prototype.getInputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.outputs.OutputContract} returns this
 */
proto.outputs.OutputContract.prototype.setInputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.outputs.OutputContractCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.outputs.OutputContractCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.outputs.OutputContractCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputContractCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: msg.getContractId_asB64(),
    stateRoot: msg.getStateRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.outputs.OutputContractCreated}
 */
proto.outputs.OutputContractCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.outputs.OutputContractCreated;
  return proto.outputs.OutputContractCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.outputs.OutputContractCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.outputs.OutputContractCreated}
 */
proto.outputs.OutputContractCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.outputs.OutputContractCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.outputs.OutputContractCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.outputs.OutputContractCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputContractCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputContractCreated.prototype.getContractId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.outputs.OutputContractCreated.prototype.getContractId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractId()));
};


/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputContractCreated.prototype.getContractId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputContractCreated} returns this
 */
proto.outputs.OutputContractCreated.prototype.setContractId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes state_root = 2;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputContractCreated.prototype.getStateRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes state_root = 2;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.outputs.OutputContractCreated.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputContractCreated.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputContractCreated} returns this
 */
proto.outputs.OutputContractCreated.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.outputs.OutputChange.prototype.toObject = function(opt_includeInstance) {
  return proto.outputs.OutputChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.outputs.OutputChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: msg.getTo_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assetId: msg.getAssetId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.outputs.OutputChange}
 */
proto.outputs.OutputChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.outputs.OutputChange;
  return proto.outputs.OutputChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.outputs.OutputChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.outputs.OutputChange}
 */
proto.outputs.OutputChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.outputs.OutputChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.outputs.OutputChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.outputs.OutputChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputChange.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to = 1;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.outputs.OutputChange.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputChange.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputChange} returns this
 */
proto.outputs.OutputChange.prototype.setTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.outputs.OutputChange.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.outputs.OutputChange} returns this
 */
proto.outputs.OutputChange.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes asset_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputChange.prototype.getAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes asset_id = 3;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.outputs.OutputChange.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputChange.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputChange} returns this
 */
proto.outputs.OutputChange.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.outputs.OutputVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.outputs.OutputVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.outputs.OutputVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: msg.getTo_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assetId: msg.getAssetId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.outputs.OutputVariable}
 */
proto.outputs.OutputVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.outputs.OutputVariable;
  return proto.outputs.OutputVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.outputs.OutputVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.outputs.OutputVariable}
 */
proto.outputs.OutputVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.outputs.OutputVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.outputs.OutputVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.outputs.OutputVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.outputs.OutputVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputVariable.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to = 1;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.outputs.OutputVariable.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputVariable.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputVariable} returns this
 */
proto.outputs.OutputVariable.prototype.setTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.outputs.OutputVariable.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.outputs.OutputVariable} returns this
 */
proto.outputs.OutputVariable.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes asset_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.outputs.OutputVariable.prototype.getAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes asset_id = 3;
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {string}
 */
proto.outputs.OutputVariable.prototype.getAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetId()));
};


/**
 * optional bytes asset_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetId()`
 * @return {!Uint8Array}
 */
proto.outputs.OutputVariable.prototype.getAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.outputs.OutputVariable} returns this
 */
proto.outputs.OutputVariable.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.outputs.OutputType = {
  UNKNOWN_OUTPUT_TYPE: 0,
  COIN: 1,
  CONTRACT: 2,
  CHANGE: 3,
  VARIABLE: 4,
  CONTRACT_CREATED: 5
};

goog.object.extend(exports, proto.outputs);
