// source: transactions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var pointers_pb = require('./pointers_pb.js');
goog.object.extend(proto, pointers_pb);
var inputs_pb = require('./inputs_pb.js');
goog.object.extend(proto, inputs_pb);
var outputs_pb = require('./outputs_pb.js');
goog.object.extend(proto, outputs_pb);
var receipts_pb = require('./receipts_pb.js');
goog.object.extend(proto, receipts_pb);
goog.exportSymbol('proto.transactions.Policy', null, global);
goog.exportSymbol('proto.transactions.PolicyType', null, global);
goog.exportSymbol('proto.transactions.ProofSet', null, global);
goog.exportSymbol('proto.transactions.StorageSlot', null, global);
goog.exportSymbol('proto.transactions.Transaction', null, global);
goog.exportSymbol('proto.transactions.TransactionStatus', null, global);
goog.exportSymbol('proto.transactions.TransactionType', null, global);
goog.exportSymbol('proto.transactions.Witness', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transactions.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transactions.Transaction.repeatedFields_, null);
};
goog.inherits(proto.transactions.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transactions.Transaction.displayName = 'proto.transactions.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transactions.StorageSlot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transactions.StorageSlot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transactions.StorageSlot.displayName = 'proto.transactions.StorageSlot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transactions.Witness = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transactions.Witness, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transactions.Witness.displayName = 'proto.transactions.Witness';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transactions.ProofSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transactions.ProofSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transactions.ProofSet.displayName = 'proto.transactions.ProofSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transactions.Policy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transactions.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transactions.Policy.displayName = 'proto.transactions.Policy';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transactions.Transaction.repeatedFields_ = [5,6,8,15,22,27,32];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transactions.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.transactions.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transactions.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: msg.getId_asB64(),
    scriptGasLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    txPointer: (f = msg.getTxPointer()) && pointers_pb.TxPointer.toObject(includeInstance, f),
    inputAssetIdsList: msg.getInputAssetIdsList_asB64(),
    inputContractsList: msg.getInputContractsList_asB64(),
    inputContract: (f = msg.getInputContract()) && inputs_pb.InputContract.toObject(includeInstance, f),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    inputs_pb.Input.toObject, includeInstance),
    isScript: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    isCreate: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    isMint: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    isUpgrade: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    isUpload: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    isBlob: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    outputs_pb.Output.toObject, includeInstance),
    outputContract: (f = msg.getOutputContract()) && outputs_pb.OutputContract.toObject(includeInstance, f),
    mintAmount: jspb.Message.getFieldWithDefault(msg, 17, 0),
    mintAssetId: msg.getMintAssetId_asB64(),
    mintGasPrice: jspb.Message.getFieldWithDefault(msg, 19, 0),
    receiptsRoot: msg.getReceiptsRoot_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 21, 0),
    witnessesList: msg.getWitnessesList_asB64(),
    script: msg.getScript_asB64(),
    scriptData: msg.getScriptData_asB64(),
    policies: (f = msg.getPolicies()) && proto.transactions.Policy.toObject(includeInstance, f),
    salt: msg.getSalt_asB64(),
    storageSlotsList: msg.getStorageSlotsList_asB64(),
    bytecodeWitnessIndex: jspb.Message.getFieldWithDefault(msg, 28, 0),
    bytecodeRoot: msg.getBytecodeRoot_asB64(),
    subsectionIndex: jspb.Message.getFieldWithDefault(msg, 30, 0),
    subsectionsNumber: jspb.Message.getFieldWithDefault(msg, 31, 0),
    proofSetList: msg.getProofSetList_asB64(),
    upgradePurpose: jspb.Message.getFieldWithDefault(msg, 33, 0),
    blobId: msg.getBlobId_asB64(),
    maturity: jspb.Message.getFieldWithDefault(msg, 35, 0),
    policyType: jspb.Message.getFieldWithDefault(msg, 36, 0),
    rawPayload: msg.getRawPayload_asB64(),
    scriptLength: jspb.Message.getFieldWithDefault(msg, 38, 0),
    scriptDataLength: jspb.Message.getFieldWithDefault(msg, 39, 0),
    storageSlotsCount: jspb.Message.getFieldWithDefault(msg, 40, 0),
    proofSetCount: jspb.Message.getFieldWithDefault(msg, 41, 0),
    witnessesCount: jspb.Message.getFieldWithDefault(msg, 42, 0),
    inputsCount: jspb.Message.getFieldWithDefault(msg, 43, 0),
    outputsCount: jspb.Message.getFieldWithDefault(msg, 44, 0),
    metadata: (f = msg.getMetadata()) && common_pb.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transactions.Transaction}
 */
proto.transactions.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transactions.Transaction;
  return proto.transactions.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transactions.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transactions.Transaction}
 */
proto.transactions.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScriptGasLimit(value);
      break;
    case 4:
      var value = new pointers_pb.TxPointer;
      reader.readMessage(value,pointers_pb.TxPointer.deserializeBinaryFromReader);
      msg.setTxPointer(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addInputAssetIds(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addInputContracts(value);
      break;
    case 7:
      var value = new inputs_pb.InputContract;
      reader.readMessage(value,inputs_pb.InputContract.deserializeBinaryFromReader);
      msg.setInputContract(value);
      break;
    case 8:
      var value = new inputs_pb.Input;
      reader.readMessage(value,inputs_pb.Input.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScript(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCreate(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMint(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUpgrade(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUpload(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBlob(value);
      break;
    case 15:
      var value = new outputs_pb.Output;
      reader.readMessage(value,outputs_pb.Output.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 16:
      var value = new outputs_pb.OutputContract;
      reader.readMessage(value,outputs_pb.OutputContract.deserializeBinaryFromReader);
      msg.setOutputContract(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMintAmount(value);
      break;
    case 18:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMintAssetId(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMintGasPrice(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptsRoot(value);
      break;
    case 21:
      var value = /** @type {!proto.transactions.TransactionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 22:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addWitnesses(value);
      break;
    case 23:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    case 24:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptData(value);
      break;
    case 25:
      var value = new proto.transactions.Policy;
      reader.readMessage(value,proto.transactions.Policy.deserializeBinaryFromReader);
      msg.setPolicies(value);
      break;
    case 26:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    case 27:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addStorageSlots(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBytecodeWitnessIndex(value);
      break;
    case 29:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytecodeRoot(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubsectionIndex(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubsectionsNumber(value);
      break;
    case 32:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProofSet(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpgradePurpose(value);
      break;
    case 34:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlobId(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaturity(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPolicyType(value);
      break;
    case 37:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawPayload(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScriptLength(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScriptDataLength(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStorageSlotsCount(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProofSetCount(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWitnessesCount(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputsCount(value);
      break;
    case 44:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputsCount(value);
      break;
    case 45:
      var value = new common_pb.Metadata;
      reader.readMessage(value,common_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transactions.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transactions.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getScriptGasLimit();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTxPointer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      pointers_pb.TxPointer.serializeBinaryToWriter
    );
  }
  f = message.getInputAssetIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getInputContractsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      6,
      f
    );
  }
  f = message.getInputContract();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      inputs_pb.InputContract.serializeBinaryToWriter
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      inputs_pb.Input.serializeBinaryToWriter
    );
  }
  f = message.getIsScript();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsCreate();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIsMint();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIsUpgrade();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIsUpload();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIsBlob();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      outputs_pb.Output.serializeBinaryToWriter
    );
  }
  f = message.getOutputContract();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      outputs_pb.OutputContract.serializeBinaryToWriter
    );
  }
  f = message.getMintAmount();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getMintAssetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      18,
      f
    );
  }
  f = message.getMintGasPrice();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getReceiptsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getWitnessesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      22,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      23,
      f
    );
  }
  f = message.getScriptData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      24,
      f
    );
  }
  f = message.getPolicies();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.transactions.Policy.serializeBinaryToWriter
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      26,
      f
    );
  }
  f = message.getStorageSlotsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      27,
      f
    );
  }
  f = message.getBytecodeWitnessIndex();
  if (f !== 0) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = message.getBytecodeRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      29,
      f
    );
  }
  f = message.getSubsectionIndex();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getSubsectionsNumber();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = message.getProofSetList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      32,
      f
    );
  }
  f = message.getUpgradePurpose();
  if (f !== 0) {
    writer.writeInt32(
      33,
      f
    );
  }
  f = message.getBlobId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      34,
      f
    );
  }
  f = message.getMaturity();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
  f = message.getPolicyType();
  if (f !== 0) {
    writer.writeInt32(
      36,
      f
    );
  }
  f = message.getRawPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      37,
      f
    );
  }
  f = message.getScriptLength();
  if (f !== 0) {
    writer.writeInt64(
      38,
      f
    );
  }
  f = message.getScriptDataLength();
  if (f !== 0) {
    writer.writeInt64(
      39,
      f
    );
  }
  f = message.getStorageSlotsCount();
  if (f !== 0) {
    writer.writeInt64(
      40,
      f
    );
  }
  f = message.getProofSetCount();
  if (f !== 0) {
    writer.writeInt32(
      41,
      f
    );
  }
  f = message.getWitnessesCount();
  if (f !== 0) {
    writer.writeInt32(
      42,
      f
    );
  }
  f = message.getInputsCount();
  if (f !== 0) {
    writer.writeInt32(
      43,
      f
    );
  }
  f = message.getOutputsCount();
  if (f !== 0) {
    writer.writeInt32(
      44,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      45,
      f,
      common_pb.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.transactions.Transaction.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes id = 2;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 script_gas_limit = 3;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getScriptGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setScriptGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional pointers.TxPointer tx_pointer = 4;
 * @return {?proto.pointers.TxPointer}
 */
proto.transactions.Transaction.prototype.getTxPointer = function() {
  return /** @type{?proto.pointers.TxPointer} */ (
    jspb.Message.getWrapperField(this, pointers_pb.TxPointer, 4));
};


/**
 * @param {?proto.pointers.TxPointer|undefined} value
 * @return {!proto.transactions.Transaction} returns this
*/
proto.transactions.Transaction.prototype.setTxPointer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearTxPointer = function() {
  return this.setTxPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.hasTxPointer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated bytes input_asset_ids = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.transactions.Transaction.prototype.getInputAssetIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes input_asset_ids = 5;
 * This is a type-conversion wrapper around `getInputAssetIdsList()`
 * @return {!Array<string>}
 */
proto.transactions.Transaction.prototype.getInputAssetIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getInputAssetIdsList()));
};


/**
 * repeated bytes input_asset_ids = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputAssetIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.transactions.Transaction.prototype.getInputAssetIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getInputAssetIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setInputAssetIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.addInputAssetIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearInputAssetIdsList = function() {
  return this.setInputAssetIdsList([]);
};


/**
 * repeated bytes input_contracts = 6;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.transactions.Transaction.prototype.getInputContractsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * repeated bytes input_contracts = 6;
 * This is a type-conversion wrapper around `getInputContractsList()`
 * @return {!Array<string>}
 */
proto.transactions.Transaction.prototype.getInputContractsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getInputContractsList()));
};


/**
 * repeated bytes input_contracts = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputContractsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.transactions.Transaction.prototype.getInputContractsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getInputContractsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setInputContractsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.addInputContracts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearInputContractsList = function() {
  return this.setInputContractsList([]);
};


/**
 * optional inputs.InputContract input_contract = 7;
 * @return {?proto.inputs.InputContract}
 */
proto.transactions.Transaction.prototype.getInputContract = function() {
  return /** @type{?proto.inputs.InputContract} */ (
    jspb.Message.getWrapperField(this, inputs_pb.InputContract, 7));
};


/**
 * @param {?proto.inputs.InputContract|undefined} value
 * @return {!proto.transactions.Transaction} returns this
*/
proto.transactions.Transaction.prototype.setInputContract = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearInputContract = function() {
  return this.setInputContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.hasInputContract = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated inputs.Input inputs = 8;
 * @return {!Array<!proto.inputs.Input>}
 */
proto.transactions.Transaction.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.inputs.Input>} */ (
    jspb.Message.getRepeatedWrapperField(this, inputs_pb.Input, 8));
};


/**
 * @param {!Array<!proto.inputs.Input>} value
 * @return {!proto.transactions.Transaction} returns this
*/
proto.transactions.Transaction.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.inputs.Input=} opt_value
 * @param {number=} opt_index
 * @return {!proto.inputs.Input}
 */
proto.transactions.Transaction.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.inputs.Input, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * optional bool is_script = 9;
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.getIsScript = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setIsScript = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool is_create = 10;
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.getIsCreate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setIsCreate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool is_mint = 11;
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.getIsMint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setIsMint = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool is_upgrade = 12;
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.getIsUpgrade = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setIsUpgrade = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool is_upload = 13;
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.getIsUpload = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setIsUpload = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool is_blob = 14;
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.getIsBlob = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setIsBlob = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * repeated outputs.Output outputs = 15;
 * @return {!Array<!proto.outputs.Output>}
 */
proto.transactions.Transaction.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.outputs.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, outputs_pb.Output, 15));
};


/**
 * @param {!Array<!proto.outputs.Output>} value
 * @return {!proto.transactions.Transaction} returns this
*/
proto.transactions.Transaction.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.outputs.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.outputs.Output}
 */
proto.transactions.Transaction.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.outputs.Output, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional outputs.OutputContract output_contract = 16;
 * @return {?proto.outputs.OutputContract}
 */
proto.transactions.Transaction.prototype.getOutputContract = function() {
  return /** @type{?proto.outputs.OutputContract} */ (
    jspb.Message.getWrapperField(this, outputs_pb.OutputContract, 16));
};


/**
 * @param {?proto.outputs.OutputContract|undefined} value
 * @return {!proto.transactions.Transaction} returns this
*/
proto.transactions.Transaction.prototype.setOutputContract = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearOutputContract = function() {
  return this.setOutputContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.hasOutputContract = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int64 mint_amount = 17;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getMintAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setMintAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bytes mint_asset_id = 18;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getMintAssetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * optional bytes mint_asset_id = 18;
 * This is a type-conversion wrapper around `getMintAssetId()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getMintAssetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMintAssetId()));
};


/**
 * optional bytes mint_asset_id = 18;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMintAssetId()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getMintAssetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMintAssetId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setMintAssetId = function(value) {
  return jspb.Message.setProto3BytesField(this, 18, value);
};


/**
 * optional int64 mint_gas_price = 19;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getMintGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setMintGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional bytes receipts_root = 20;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getReceiptsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes receipts_root = 20;
 * This is a type-conversion wrapper around `getReceiptsRoot()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getReceiptsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptsRoot()));
};


/**
 * optional bytes receipts_root = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptsRoot()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getReceiptsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setReceiptsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 20, value);
};


/**
 * optional TransactionStatus status = 21;
 * @return {!proto.transactions.TransactionStatus}
 */
proto.transactions.Transaction.prototype.getStatus = function() {
  return /** @type {!proto.transactions.TransactionStatus} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.transactions.TransactionStatus} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 21, value);
};


/**
 * repeated bytes witnesses = 22;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.transactions.Transaction.prototype.getWitnessesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 22));
};


/**
 * repeated bytes witnesses = 22;
 * This is a type-conversion wrapper around `getWitnessesList()`
 * @return {!Array<string>}
 */
proto.transactions.Transaction.prototype.getWitnessesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getWitnessesList()));
};


/**
 * repeated bytes witnesses = 22;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWitnessesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.transactions.Transaction.prototype.getWitnessesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getWitnessesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setWitnessesList = function(value) {
  return jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.addWitnesses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearWitnessesList = function() {
  return this.setWitnessesList([]);
};


/**
 * optional bytes script = 23;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * optional bytes script = 23;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 23;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 23, value);
};


/**
 * optional bytes script_data = 24;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getScriptData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * optional bytes script_data = 24;
 * This is a type-conversion wrapper around `getScriptData()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getScriptData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptData()));
};


/**
 * optional bytes script_data = 24;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptData()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getScriptData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setScriptData = function(value) {
  return jspb.Message.setProto3BytesField(this, 24, value);
};


/**
 * optional Policy policies = 25;
 * @return {?proto.transactions.Policy}
 */
proto.transactions.Transaction.prototype.getPolicies = function() {
  return /** @type{?proto.transactions.Policy} */ (
    jspb.Message.getWrapperField(this, proto.transactions.Policy, 25));
};


/**
 * @param {?proto.transactions.Policy|undefined} value
 * @return {!proto.transactions.Transaction} returns this
*/
proto.transactions.Transaction.prototype.setPolicies = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearPolicies = function() {
  return this.setPolicies(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.hasPolicies = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional bytes salt = 26;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * optional bytes salt = 26;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 26;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 26, value);
};


/**
 * repeated bytes storage_slots = 27;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.transactions.Transaction.prototype.getStorageSlotsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 27));
};


/**
 * repeated bytes storage_slots = 27;
 * This is a type-conversion wrapper around `getStorageSlotsList()`
 * @return {!Array<string>}
 */
proto.transactions.Transaction.prototype.getStorageSlotsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getStorageSlotsList()));
};


/**
 * repeated bytes storage_slots = 27;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStorageSlotsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.transactions.Transaction.prototype.getStorageSlotsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getStorageSlotsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setStorageSlotsList = function(value) {
  return jspb.Message.setField(this, 27, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.addStorageSlots = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 27, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearStorageSlotsList = function() {
  return this.setStorageSlotsList([]);
};


/**
 * optional int32 bytecode_witness_index = 28;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getBytecodeWitnessIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setBytecodeWitnessIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional bytes bytecode_root = 29;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getBytecodeRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * optional bytes bytecode_root = 29;
 * This is a type-conversion wrapper around `getBytecodeRoot()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getBytecodeRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytecodeRoot()));
};


/**
 * optional bytes bytecode_root = 29;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytecodeRoot()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getBytecodeRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytecodeRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setBytecodeRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 29, value);
};


/**
 * optional int32 subsection_index = 30;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getSubsectionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setSubsectionIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional int32 subsections_number = 31;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getSubsectionsNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setSubsectionsNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * repeated bytes proof_set = 32;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.transactions.Transaction.prototype.getProofSetList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 32));
};


/**
 * repeated bytes proof_set = 32;
 * This is a type-conversion wrapper around `getProofSetList()`
 * @return {!Array<string>}
 */
proto.transactions.Transaction.prototype.getProofSetList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofSetList()));
};


/**
 * repeated bytes proof_set = 32;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofSetList()`
 * @return {!Array<!Uint8Array>}
 */
proto.transactions.Transaction.prototype.getProofSetList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofSetList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setProofSetList = function(value) {
  return jspb.Message.setField(this, 32, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.addProofSet = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 32, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearProofSetList = function() {
  return this.setProofSetList([]);
};


/**
 * optional int32 upgrade_purpose = 33;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getUpgradePurpose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setUpgradePurpose = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional bytes blob_id = 34;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getBlobId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/**
 * optional bytes blob_id = 34;
 * This is a type-conversion wrapper around `getBlobId()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getBlobId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlobId()));
};


/**
 * optional bytes blob_id = 34;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlobId()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getBlobId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlobId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setBlobId = function(value) {
  return jspb.Message.setProto3BytesField(this, 34, value);
};


/**
 * optional int32 maturity = 35;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getMaturity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setMaturity = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional int32 policy_type = 36;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getPolicyType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setPolicyType = function(value) {
  return jspb.Message.setProto3IntField(this, 36, value);
};


/**
 * optional bytes raw_payload = 37;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Transaction.prototype.getRawPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * optional bytes raw_payload = 37;
 * This is a type-conversion wrapper around `getRawPayload()`
 * @return {string}
 */
proto.transactions.Transaction.prototype.getRawPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawPayload()));
};


/**
 * optional bytes raw_payload = 37;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawPayload()`
 * @return {!Uint8Array}
 */
proto.transactions.Transaction.prototype.getRawPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setRawPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 37, value);
};


/**
 * optional int64 script_length = 38;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getScriptLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setScriptLength = function(value) {
  return jspb.Message.setProto3IntField(this, 38, value);
};


/**
 * optional int64 script_data_length = 39;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getScriptDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setScriptDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 39, value);
};


/**
 * optional int64 storage_slots_count = 40;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getStorageSlotsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setStorageSlotsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * optional int32 proof_set_count = 41;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getProofSetCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setProofSetCount = function(value) {
  return jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * optional int32 witnesses_count = 42;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getWitnessesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setWitnessesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};


/**
 * optional int32 inputs_count = 43;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getInputsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setInputsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional int32 outputs_count = 44;
 * @return {number}
 */
proto.transactions.Transaction.prototype.getOutputsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 44, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.setOutputsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 44, value);
};


/**
 * optional common.Metadata metadata = 45;
 * @return {?proto.common.Metadata}
 */
proto.transactions.Transaction.prototype.getMetadata = function() {
  return /** @type{?proto.common.Metadata} */ (
    jspb.Message.getWrapperField(this, common_pb.Metadata, 45));
};


/**
 * @param {?proto.common.Metadata|undefined} value
 * @return {!proto.transactions.Transaction} returns this
*/
proto.transactions.Transaction.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 45, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transactions.Transaction} returns this
 */
proto.transactions.Transaction.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transactions.Transaction.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 45) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transactions.StorageSlot.prototype.toObject = function(opt_includeInstance) {
  return proto.transactions.StorageSlot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transactions.StorageSlot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.StorageSlot.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txId: msg.getTxId_asB64(),
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transactions.StorageSlot}
 */
proto.transactions.StorageSlot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transactions.StorageSlot;
  return proto.transactions.StorageSlot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transactions.StorageSlot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transactions.StorageSlot}
 */
proto.transactions.StorageSlot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transactions.StorageSlot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transactions.StorageSlot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transactions.StorageSlot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.StorageSlot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.transactions.StorageSlot.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transactions.StorageSlot} returns this
 */
proto.transactions.StorageSlot.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes tx_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.StorageSlot.prototype.getTxId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx_id = 2;
 * This is a type-conversion wrapper around `getTxId()`
 * @return {string}
 */
proto.transactions.StorageSlot.prototype.getTxId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxId()));
};


/**
 * optional bytes tx_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxId()`
 * @return {!Uint8Array}
 */
proto.transactions.StorageSlot.prototype.getTxId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.StorageSlot} returns this
 */
proto.transactions.StorageSlot.prototype.setTxId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.StorageSlot.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.transactions.StorageSlot.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.transactions.StorageSlot.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.StorageSlot} returns this
 */
proto.transactions.StorageSlot.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes value = 4;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.StorageSlot.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes value = 4;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.transactions.StorageSlot.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.transactions.StorageSlot.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.StorageSlot} returns this
 */
proto.transactions.StorageSlot.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transactions.Witness.prototype.toObject = function(opt_includeInstance) {
  return proto.transactions.Witness.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transactions.Witness} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.Witness.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txId: msg.getTxId_asB64(),
    witnessData: msg.getWitnessData_asB64(),
    witnessDataLength: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transactions.Witness}
 */
proto.transactions.Witness.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transactions.Witness;
  return proto.transactions.Witness.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transactions.Witness} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transactions.Witness}
 */
proto.transactions.Witness.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWitnessData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWitnessDataLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transactions.Witness.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transactions.Witness.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transactions.Witness} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.Witness.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getWitnessData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getWitnessDataLength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.transactions.Witness.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transactions.Witness} returns this
 */
proto.transactions.Witness.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes tx_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Witness.prototype.getTxId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx_id = 2;
 * This is a type-conversion wrapper around `getTxId()`
 * @return {string}
 */
proto.transactions.Witness.prototype.getTxId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxId()));
};


/**
 * optional bytes tx_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxId()`
 * @return {!Uint8Array}
 */
proto.transactions.Witness.prototype.getTxId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Witness} returns this
 */
proto.transactions.Witness.prototype.setTxId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes witness_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Witness.prototype.getWitnessData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes witness_data = 3;
 * This is a type-conversion wrapper around `getWitnessData()`
 * @return {string}
 */
proto.transactions.Witness.prototype.getWitnessData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWitnessData()));
};


/**
 * optional bytes witness_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWitnessData()`
 * @return {!Uint8Array}
 */
proto.transactions.Witness.prototype.getWitnessData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWitnessData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Witness} returns this
 */
proto.transactions.Witness.prototype.setWitnessData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 witness_data_length = 4;
 * @return {number}
 */
proto.transactions.Witness.prototype.getWitnessDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Witness} returns this
 */
proto.transactions.Witness.prototype.setWitnessDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transactions.ProofSet.prototype.toObject = function(opt_includeInstance) {
  return proto.transactions.ProofSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transactions.ProofSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.ProofSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txId: msg.getTxId_asB64(),
    proofHash: msg.getProofHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transactions.ProofSet}
 */
proto.transactions.ProofSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transactions.ProofSet;
  return proto.transactions.ProofSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transactions.ProofSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transactions.ProofSet}
 */
proto.transactions.ProofSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transactions.ProofSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transactions.ProofSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transactions.ProofSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.ProofSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.transactions.ProofSet.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transactions.ProofSet} returns this
 */
proto.transactions.ProofSet.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes tx_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.ProofSet.prototype.getTxId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx_id = 2;
 * This is a type-conversion wrapper around `getTxId()`
 * @return {string}
 */
proto.transactions.ProofSet.prototype.getTxId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxId()));
};


/**
 * optional bytes tx_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxId()`
 * @return {!Uint8Array}
 */
proto.transactions.ProofSet.prototype.getTxId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.ProofSet} returns this
 */
proto.transactions.ProofSet.prototype.setTxId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes proof_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.ProofSet.prototype.getProofHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_hash = 3;
 * This is a type-conversion wrapper around `getProofHash()`
 * @return {string}
 */
proto.transactions.ProofSet.prototype.getProofHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofHash()));
};


/**
 * optional bytes proof_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofHash()`
 * @return {!Uint8Array}
 */
proto.transactions.ProofSet.prototype.getProofHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.ProofSet} returns this
 */
proto.transactions.ProofSet.prototype.setProofHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transactions.Policy.prototype.toObject = function(opt_includeInstance) {
  return proto.transactions.Policy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transactions.Policy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.Policy.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txId: msg.getTxId_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transactions.Policy}
 */
proto.transactions.Policy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transactions.Policy;
  return proto.transactions.Policy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transactions.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transactions.Policy}
 */
proto.transactions.Policy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {!proto.transactions.PolicyType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transactions.Policy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transactions.Policy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transactions.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transactions.Policy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getData();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.transactions.Policy.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transactions.Policy} returns this
 */
proto.transactions.Policy.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes tx_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.transactions.Policy.prototype.getTxId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx_id = 2;
 * This is a type-conversion wrapper around `getTxId()`
 * @return {string}
 */
proto.transactions.Policy.prototype.getTxId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxId()));
};


/**
 * optional bytes tx_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxId()`
 * @return {!Uint8Array}
 */
proto.transactions.Policy.prototype.getTxId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.transactions.Policy} returns this
 */
proto.transactions.Policy.prototype.setTxId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional PolicyType type = 3;
 * @return {!proto.transactions.PolicyType}
 */
proto.transactions.Policy.prototype.getType = function() {
  return /** @type {!proto.transactions.PolicyType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.transactions.PolicyType} value
 * @return {!proto.transactions.Policy} returns this
 */
proto.transactions.Policy.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 data = 4;
 * @return {number}
 */
proto.transactions.Policy.prototype.getData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.transactions.Policy} returns this
 */
proto.transactions.Policy.prototype.setData = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.transactions.TransactionType = {
  UNKNOWN_TRANSACTION_TYPE: 0,
  SCRIPT: 1,
  CREATE: 2,
  MINT: 3,
  UPGRADE: 4,
  UPLOAD: 5,
  BLOB: 6
};

/**
 * @enum {number}
 */
proto.transactions.TransactionStatus = {
  UNKNOWN_TRANSACTION_STATUS: 0,
  FAILED: 1,
  SUBMITTED: 2,
  SQUEEZED_OUT: 3,
  SUCCESS: 4,
  NONE: 5
};

/**
 * @enum {number}
 */
proto.transactions.PolicyType = {
  UNKNOWN_POLICY_TYPE: 0,
  TIP: 1,
  WITNESS_LIMIT: 2,
  MATURITY: 3,
  MAX_FEE: 4
};

goog.object.extend(exports, proto.transactions);
