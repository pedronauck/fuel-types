syntax = "proto3";

package transactions;

import "common.proto";
import "pointers.proto";
import "inputs.proto";
import "outputs.proto";
import "receipts.proto";

enum TransactionType {
  UNKNOWN_TRANSACTION_TYPE = 0;
  SCRIPT = 1;
  CREATE = 2;
  MINT = 3;
  UPGRADE = 4;
  UPLOAD = 5;
  BLOB = 6;
}

enum TransactionStatus {
  UNKNOWN_TRANSACTION_STATUS = 0;
  FAILED = 1;
  SUBMITTED = 2;
  SQUEEZED_OUT = 3;
  SUCCESS = 4;
  NONE = 5;
}

enum PolicyType {
  UNKNOWN_POLICY_TYPE = 0;
  TIP = 1;
  WITNESS_LIMIT = 2;
  MATURITY = 3;
  MAX_FEE = 4;
}

message Transaction {
  string subject = 1;

  // Fields matching fuel-core
  bytes id = 2;
  int64 script_gas_limit = 3;
  pointers.TxPointer tx_pointer = 4;
  repeated bytes input_asset_ids = 5;
  repeated bytes input_contracts = 6;
  inputs.InputContract input_contract = 7;
  repeated inputs.Input inputs = 8;
  bool is_script = 9;
  bool is_create = 10;
  bool is_mint = 11;
  bool is_upgrade = 12;
  bool is_upload = 13;
  bool is_blob = 14;
  repeated outputs.Output outputs = 15;
  outputs.OutputContract output_contract = 16;
  int64 mint_amount = 17;
  bytes mint_asset_id = 18;
  int64 mint_gas_price = 19;
  bytes receipts_root = 20;
  TransactionStatus status = 21;
  repeated bytes witnesses = 22;
  bytes script = 23;
  bytes script_data = 24;
  Policy policies = 25;
  bytes salt = 26;
  repeated bytes storage_slots = 27;
  int32 bytecode_witness_index = 28;
  bytes bytecode_root = 29;
  int32 subsection_index = 30;
  int32 subsections_number = 31;
  repeated bytes proof_set = 32;
  int32 upgrade_purpose = 33;
  bytes blob_id = 34;

  // Extra fields (not in fuel-core)
  int32 maturity = 35;
  int32 policy_type = 36;
  bytes raw_payload = 37;
  int64 script_length = 38;
  int64 script_data_length = 39;
  int64 storage_slots_count = 40;
  int32 proof_set_count = 41;
  int32 witnesses_count = 42;
  int32 inputs_count = 43;
  int32 outputs_count = 44;

  // Metadata
  common.Metadata metadata = 45;
}

message StorageSlot {
  string subject = 1;
  bytes tx_id = 2;
  bytes key = 3;
  bytes value = 4;
}

message Witness {
  string subject = 1;
  bytes tx_id = 2;
  bytes witness_data = 3;
  int32 witness_data_length = 4;
}

message ProofSet {
  string subject = 1;
  bytes tx_id = 2;
  bytes proof_hash = 3;
}

message Policy {
  string subject = 1;
  bytes tx_id = 2;
  PolicyType type = 3;
  int64 data = 4;
}